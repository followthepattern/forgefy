import React, { useEffect } from "react";
import { useForm } from "react-hook-form";
import { useNavigate, useParams } from "react-router-dom";
import { Id } from "react-toastify";

import SingleLayout from "@/app/(account)/components/singleView/layout";
import PrimaryButton from "@/app/components/buttons/primaryButton";
import CancelModal from "@/app/components/modals/cancelModal";
import GridFields from "@/app/(account)/components/singleView/gridFields/gridFields";
import Label from "@/app/(account)/components/labels/label";
import InputField from "@/app/components/inputs/inputField";
import ConfirmModal from "@/app/(account)/components/modals/confirmModal";
import ItemNotFound from "@/app/(account)/components/singleView/itemNotFound";
import LoadingSingleItem from "@/app/(account)/components/singleView/loadingSingleItem";
import { deleteToast, saveToast, upsertToastError, upsertToastSuccess } from "@/app/(account)/components/toastContainer/toasts";
import Error from "@/app/(account)/error";

import useSingleUser from "../../../hooks/singleUser";
import useUpdateUser from "../../../hooks/updateUser";
import useDeleteUser from "../../../hooks/deleteUser";

import { RESOURCE_URL } from "../../../const";
import { User } from "../../../model";

export default function UserEdit() {
    const { id = "" } = useParams();

    const { loading, data, error, itemNotFound } = useSingleUser(id);

    const [executeUpdateMutation, { updateError, updateResult }] = useUpdateUser();

    const [executeDeleteMutation, { deleteError, deleteResult }] = useDeleteUser();

    const navigate = useNavigate();

    const toastId = React.useRef<Id | null>(null);

    useEffect(() => {
        if (updateResult && updateResult > 0) {
            upsertToastSuccess(toastId);
        }

        if (updateError) {
            upsertToastError(toastId);

            console.error(updateError);
        }

    }, [updateResult])

    useEffect(() => {
        if (deleteResult && deleteResult > 0) {
            upsertToastSuccess(toastId);
            navigate(`/${RESOURCE_URL}`)
        }

        if (deleteError) {
            upsertToastError(toastId);

            console.error(deleteError);
        }

    }, [deleteResult])

    const {
        getValues,
        control,
        formState: {
            isDirty,
        },
    } = useForm<User>({
        mode: "onBlur",
        criteriaMode: "all",
    });

    if (loading) {
        return <LoadingSingleItem className="py-6" />
    }

    if (itemNotFound) {
        return <ItemNotFound className="py-6" />
    }

    if (error) {
        return <Error error={error} />
    }

    const onSave = () => {
        const values = getValues();

        toastId.current = saveToast()

        values.id = id;
        executeUpdateMutation(id, values)
    }

    const onDelete = () => {
        toastId.current = deleteToast();

        executeDeleteMutation(id)
    }

    const onCancel = () => {
        navigate(`/${RESOURCE_URL}`)
    }

    return (
        <>
            <SingleLayout.Title>User: {data?.id}</SingleLayout.Title>
            <form action="">
                <GridFields className="py-6">
                    <div className="sm:col-span-2">
                        <Label htmlFor="email">
                            Email
                        </Label>
                        <InputField
                            control={control}
                            name="email"
                            id="email"
                            defaultValue={data?.email}
                            rules={
                                { required: "This field is requiered" }
                            }
                        />
                    </div>
                    <div className="sm:col-span-2">
                        <Label htmlFor="firstName">
                            First Name
                        </Label>
                        <InputField
                            control={control}
                            id="firstName"
                            name="firstName"
                            defaultValue={data?.firstName}
                            rules={
                                { required: "This field is requiered" }
                            }
                        />
                    </div>
                    <div className="sm:col-span-2">
                        <Label htmlFor="lastName">
                            Last Name
                        </Label>
                        <InputField
                            control={control}
                            id="lastName"
                            name="lastName"
                            defaultValue={data?.lastName}
                            rules={
                                { required: "This field is requiered" }
                            }
                        />
                    </div>
                </GridFields>
                <SingleLayout.Footer className="justify-between">
                    <div className="flex gap-x-2">
                        <PrimaryButton onClick={onSave}>Save</PrimaryButton>
                        <CancelModal
                            onConfirm={onCancel}
                            dontAsk={!isDirty}
                            className="border text-brand border-brand hover:bg-gray-fill active:bg-gray-stroke-weak"
                        >
                            Cancel
                        </CancelModal>
                    </div>
                    <ConfirmModal onConfirm={onDelete} title="Delete User" body={`Are you sure you want to delete ${data?.id}?`}>
                        Delete
                    </ConfirmModal>
                </SingleLayout.Footer>
            </form>
        </>
    )
}