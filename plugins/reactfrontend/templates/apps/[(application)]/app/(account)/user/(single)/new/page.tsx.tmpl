import React, { useEffect } from "react";
import { useForm } from "react-hook-form";
import { Id } from "react-toastify";
import { useNavigate } from "react-router-dom";

import PrimaryButton from "@/app/components/buttons/primaryButton";
import CancelModal from "@/app/components/modals/cancelModal";
import InputField from "@/app/components/inputs/inputField";

import SingleLayout from "../../../components/singleView/layout";
import GridFields from "../../../components/singleView/gridFields/gridFields";
import Label from "../../../components/labels/label";
import { createToast, upsertToastError, upsertToastSuccess } from "../../../components/toastContainer/toasts";

import { User } from "../../model";
import useCreateUser from "../../hooks/createUser";
import { RESOURCE_URL } from "../../const";

export default function UserNew() {
    const [executeMutation, { createLoading, createError, createResult }] = useCreateUser();

    const navigate = useNavigate();

    const toastId = React.useRef<Id | null>(null);

    useEffect(() => {
        if (createResult && createResult > 0) {
            upsertToastSuccess(toastId);

            navigate(`/${RESOURCE_URL}`);
        }

        if (createError) {
            upsertToastError(toastId);

            console.error(createError);
        }

    }, [createResult, createError]);

    const {
        control,
        formState: {
            isDirty,
        },
        getValues,
        handleSubmit,
    } = useForm<User>({
        mode: "onBlur",
        criteriaMode: "all",
        defaultValues: {
            email: null,
            firstName: null,
            lastName: null,
        }
    });

    const onCreate = () => {
        const values = getValues();

        toastId.current = createToast();

        executeMutation(values);
    }

    const onCancel = () => {
        navigate(`/${RESOURCE_URL}`)
    }

    return (
        <>
            <SingleLayout.Title>New User</SingleLayout.Title>
            <form>
                <GridFields className="py-6">
                    <div className="sm:col-span-2">
                        <Label htmlFor="title">
                            Email
                        </Label>
                        <InputField
                            control={control}
                            id="email"
                            name="email"
                            rules={
                                { required: "This field is requiered" }
                            }
                        />
                    </div>
                    <div className="sm:col-span-2">
                        <Label htmlFor="title">
                            First Name
                        </Label>
                        <InputField
                            control={control}
                            id="firstName"
                            name="firstName"
                            rules={
                                { required: "This field is requiered" }
                            }
                        />
                    </div>
                    <div className="sm:col-span-2">
                        <Label htmlFor="title">
                            Last Name
                        </Label>
                        <InputField
                            control={control}
                            name="lastName"
                            id="lastName"
                            rules={
                                { required: "This field is requiered" }
                            }
                        />
                    </div>
                </GridFields>
                <SingleLayout.Footer>
                    <PrimaryButton
                        onClick={handleSubmit(onCreate)}
                        state={createLoading ? 'loading' : 'active'}
                    >
                        Create
                    </PrimaryButton>
                    <CancelModal
                        onConfirm={onCancel}
                        dontAsk={!isDirty}
                        className="border text-brand border-brand hover:bg-gray-fill active:bg-gray-stroke-weak"
                    >
                        Cancel
                    </CancelModal>
                </SingleLayout.Footer>
            </form>
        </>
    )
}