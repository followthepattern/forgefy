import React, { useContext, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Id } from 'react-toastify';

import Collection from '@/app/components/collection/collection';
import { ListQueryParams, SortLabel } from '@/lib/query';
import { deleteToast, upsertToastError, upsertToastSuccess } from '../components/toastContainer/toasts';

import { QueryContext } from '../contexts/queryContext';
import TableSkeleton from '../components/skeletons/tableSkeleton';
import ListView from '../components/listView/view';

import Error from '../error';
import { RESOURCE_NAME, RESOURCE_URL } from './const';

import useListUser from './hooks/listUser';
import { User } from './model';
import useDeleteUser from './hooks/deleteUser';

function viewLink(value: User): string {
  return `/user/${value.id}`
}

function editLink(value: User): string {
  return `/user/${value.id}/edit`
}

export default function UserList() {
  const { t } = useTranslation();
  
  const orderByLabels: SortLabel[] = [
    {
      name: "id",
      label: t('common.id'),
      desc: false,
    },
    {
      name: "email",
      label: t('user.email'),
      desc: false,
    },
    {
      name: "first_name",
      label: t('user.firstName'),
      desc: false,
    },
    {
      name: "last_name",
      label: t('user.lastName'),
      desc: false,
    }
  ];

  return (
    <ListView
      resourceName={RESOURCE_NAME}
      resourceUrl={RESOURCE_URL}
      orderByLabels={orderByLabels}
    >
      <UserListComponent />
    </ListView>
  )
}

function UserListComponent() {
  const { t } = useTranslation();
  const queryProps = useContext(QueryContext);

  const columns = [
    {
      id: "email",
      name: t('user.email'),
    },
    {
      id: "firstName",
      name: t('user.firstName'),
    }, {
      id: "lastName",
      name: t('user.lastName'),
    }
  ];

  const [executeQuery, { data, error, loading, itemNotFound, called }] = useListUser();

  const [executeDelete, { deleteError, deleteResult }] = useDeleteUser();

  const toastId = React.useRef<Id | null>(null);

  const listQueryParams: ListQueryParams = {
    page: queryProps.currentPage,
    pageSize: queryProps.pageSize,
    search: queryProps.filter,
  }

  if (queryProps.orderBy) {
    listQueryParams.orderBy = [queryProps.orderBy]
  }

  useEffect(() => {
    if (deleteResult && deleteResult > 0) {
      upsertToastSuccess(toastId);

      listQueryParams.fetchPolicy = "network-only";

      executeQuery(listQueryParams);
    }

    if (deleteError) {
      upsertToastError(toastId);
      console.error(deleteError);
    }
  }, [deleteResult, deleteError])

  useEffect(() => {
    executeQuery(listQueryParams);
  }, [queryProps.pageSize, queryProps.currentPage, queryProps.filter, queryProps.orderBy])

  if (error) {
    return <Error error={error} />
  }

  if (!called) {
    return <TableSkeleton />
  }

  if (loading) {
    return <TableSkeleton />
  }

  if (!data?.data) {
    return <TableSkeleton />
  }

  if (itemNotFound) {
    return <div>{t('common.itemNotFound')}</div>
  }

  const items = data.data ?? [];

  return (
    <>
      <div className="overflow-x-auto sm:rounded-lg">
        <Collection
          items={items}
          toViewLink={viewLink}
          toEditLink={editLink}
          columns={columns}

          onDelete={deleteItems => {
            toastId.current = deleteToast();

            executeDelete(deleteItems.map(i => i.id))
          }}

          currentPage={queryProps?.currentPage ?? 1}
          count={data.count}
          pageSize={queryProps?.pageSize ?? 20}
          onClick={queryProps?.setCurrentPage}
        />
      </div>
    </>
  )
}