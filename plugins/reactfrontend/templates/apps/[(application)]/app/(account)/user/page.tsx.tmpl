import SectionHeader from '../components/listPage/sectionHeader/sectionHeader';
import List from '../components/listPage/listPage';
import { RESOURCE_URL, RESOURCE_NAME } from "./const";
import { ListPageComponentProperties } from '../components/listPage/listPageWrapper/listPageWrapper';
import { SortLabel, SetPageParams, SetSearchPatternParams, SetSortPatternParrams } from '../components/listPage/listPageWrapper/listingFunctions';
import useListUser from './hooks/listUser';
import CreateTable, { CreateTableProperties } from '../components/listPage/table/table';
import { User } from './model';
import { ToHumanReadable } from '@/lib/strings';

const sortByLables: SortLabel[] = [
  {
    code: "id",
    name: "Id",
    asc: true,
  },
  {
    code: "email",
    name: "Email",
    asc: true,
  },
  {
    code: "first_name",
    name: "First Name",
    asc: true,
  },
  {
    code: "last_name",
    name: "Last Name",
    asc: true,
  },
];

function userViewLink(value: User): string {
  return `/${RESOURCE_URL}/${value.id}`
}

function userEditLink(value: User): string {
  return `/${RESOURCE_URL}/${value.id}/edit`
}

function getCreateTableProperties(): CreateTableProperties<User> {
  return {
    headerColumns: ["Email","First Name","Last Name",],
    getViewLink: userViewLink,
    getEditLink: userEditLink,
    getCells: (entity) => [ToHumanReadable(entity.email),ToHumanReadable(entity.firstName),ToHumanReadable(entity.lastName)]
  }
}

export default function UserList(props: ListPageComponentProperties) {
  const sortOnChange = (sortLabel: SortLabel) => {
    SetSortPatternParrams(props.searchParams, props.setSearchParams, sortLabel);
  }

  const searchInputOnChange = (searchString: string) => {
    SetSearchPatternParams(props.searchParams, props.setSearchParams, searchString);
  }

  const pageOnChange = (page: number) => {
    SetPageParams(props.searchParams, props.setSearchParams, page);
  }

  const selectedSortLabel = sortByLables.find(l => l.code == props.sortProps.sortLabel?.code);

  const createTableProperties = getCreateTableProperties();

  const entityTable = CreateTable(createTableProperties);

  return (
    <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <SectionHeader
        resourceName={RESOURCE_NAME}
        resourceUrl={`/${RESOURCE_URL}`}
        searchInputOnChange={searchInputOnChange}
        sortOnChange={sortOnChange}
        searchInput={props.filterProps.searchString}
        sortByLables={sortByLables}
        selectedSortLabel={selectedSortLabel}
      />
      <div className="flow-root mt-8 overflow-hidden">
        <List {...props}
          sortProps={{ "{{" }}sortLabel: selectedSortLabel {{ "}}" }}
          onPageChange={pageOnChange}
          useList={useListUser}
          tableComponent={entityTable}
        />
      </div>
    </div>
  )
}