import { useContext, useEffect } from 'react';

import Collection from '@/app/components/collection/collection';
import { ListQueryParams, SortLabel } from '@/lib/query';

import { QueryContext } from '../contexts/queryContext';
import TableSkeleton from '../components/skeletons/tableSkeleton';
import ListView from '../components/listView/view';

import Error from '../error';
import { RESOURCE_NAME, RESOURCE_URL } from './const';

import useListUser from './hooks/listUser';
import { User } from './model';

const columns = [
{
  id: "email",
  name: "Email",
},
{
  id: "firstName",
  name: "First Name",
}, {
  id: "lastName",
  name: "Last Name",
}]

const orderByLabels: SortLabel[] = [{
  name: "id",
  label: "Id",
  desc: false,
},
{
  name: "email",
  label: "Email",
  desc: false,
},
{
  name: "first_name",
  label: "First Name",
  desc: false,
}, {
  name: "last_name",
  label: "Last Name",
  desc: false,
}];

function viewLink(value: User): string {
  return `/user/${value.id}`
}

function editLink(value: User): string {
  return `/user/${value.id}/edit`
}

export default function UserList() {
  return (
    <ListView
      resourceName={RESOURCE_NAME}
      resourceUrl={RESOURCE_URL}
      orderByLabels={orderByLabels}
    >
      <UserListComponent />
    </ListView>
  )
}

function UserListComponent() {
  const queryProps = useContext(QueryContext);

  const [executeQuery, { data, error, loading, itemNotFound, called }] = useListUser();

  const listQueryParams: ListQueryParams = {
    page: queryProps.currentPage,
    pageSize: queryProps.pageSize,
    search: queryProps.filter,
  }

  if (queryProps.orderBy) {
    listQueryParams.orderBy = [queryProps.orderBy]
  }

  useEffect(() => {
    executeQuery(listQueryParams);
  }, [queryProps.pageSize, queryProps.currentPage, queryProps.filter, queryProps.orderBy])

  if (error) {
    return <Error error={error} />
  }

  if (!called) {
    return <TableSkeleton />
  }

  if (loading) {
    return <TableSkeleton />
  }

  if (!data?.data) {
    return <TableSkeleton />
  }

  if (itemNotFound) {
    return <div>Item not found</div>
  }

  const items = data.data ?? [];

  return (
    <>
      <div className="overflow-x-auto sm:rounded-lg">
        <Collection
          items={items}
          toViewLink={viewLink}
          toEditLink={editLink}
          columns={columns}

          currentPage={queryProps?.currentPage ?? 1}
          count={data.count}
          pageSize={queryProps?.pageSize ?? 20}
          onClick={queryProps?.setCurrentPage}
        />
      </div>
    </>
  )
}