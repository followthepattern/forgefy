{{ $feature := . -}}
import React, { useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useForm } from "react-hook-form";
import { Id, toast } from "react-toastify";

import SingleLayout from "@/app/(account)/components/singleView/layout";
import SecondaryButton from "@/app/components/buttons/secondaryButton";
import PrimaryButton from "@/app/components/buttons/primaryButton";
import GridFields from "@/app/(account)/components/singleView/gridFields/gridFields";
import Label from "@/app/(account)/components/labels/label";
import InputField from "@/app/components/inputs/inputField";

{{- if $feature | HasBoolean -}}
import Checkbox from "@/app/components/inputs/checkboxField";
{{ end -}}
{{if $feature | HasNumber -}}
import NumberField from "@/app/components/inputs/numberField";
{{ end -}}
{{if $feature | HasText -}}
import TextareaField from "@/app/components/inputs/textareaField";
{{ end -}}
{{if $feature | HasTime -}}
import TimeField from "@/app/components/inputs/timeField";
{{ end -}}
{{if $feature | HasDate -}}
import DateField from "@/app/components/inputs/dateField";
{{ end -}}
{{if $feature | HasFile -}}
import FileField from "@/app/components/inputs/fileField";
{{ end }}
import ConfirmModal from "@/app/(account)/components/modals/confirmModal";

import useSingle{{ $feature.FeatureName | UpperCamelCase }} from "../../../hooks/single{{ $feature.FeatureName | UpperCamelCase }}";
import useUpdate{{ $feature.FeatureName | UpperCamelCase }} from "../../../hooks/update{{ $feature.FeatureName | UpperCamelCase }}";
import useDelete{{ $feature.FeatureName | UpperCamelCase }} from "../../../hooks/delete{{ $feature.FeatureName | UpperCamelCase }}";
import { RESOURCE_NAME, RESOURCE_URL } from "../../../const";
import { {{ $feature.FeatureName | UpperCamelCase }} } from "../../../model";

export default function {{ $feature.FeatureName | UpperCamelCase }}Edit() {
    const { id } = useParams();

    const { loading, data, error, itemNotFound } = useSingle{{ $feature.FeatureName | UpperCamelCase }}(id ?? "");

    const [executeUpdateMutation, { updateError, updateResult }] = useUpdate{{ $feature.FeatureName | UpperCamelCase }}();

    const [executeDeleteMutation, { deleteError, deleteResult }] = useDelete{{ $feature.FeatureName | UpperCamelCase }}();

    const navigate = useNavigate();

    const toastId = React.useRef<Id | null>(null);

    useEffect(() => {
        if (updateResult && updateResult > 0) {
            if (toastId.current) {
                toast.update(toastId.current, {
                    render: "Success!",
                    type: toast.TYPE.SUCCESS,
                    autoClose: 3000,
                })
            }
            navigate(`/${RESOURCE_URL}`)
        }
    }, [updateResult])

    useEffect(() => {
        if (deleteResult && deleteResult > 0) {
            navigate(`/${RESOURCE_URL}`)
        }
    }, [deleteResult])

    const form = useForm<{{ $feature.FeatureName | UpperCamelCase }}>({
        mode: "onBlur",
        criteriaMode: "all",
    });

    if (loading) {
        return (<div>Loading...</div>)
    }

    if (itemNotFound) {
        // notFound();
    }

    if (error) {
        return <div>{JSON.stringify(error)}</div>
    }

    const onSave = () => {
        const values = form.getValues();

        toastId.current = toast("Saving...", { autoClose: false })

        executeUpdateMutation(id ?? "", values)
    }

    const onDelete = () => {
        executeDeleteMutation(id ?? "")
    }

    const onCancel = () => {
        navigate(`/${RESOURCE_URL}`)
    }

    return (
        <>
            <SingleLayout.Title>{{ $feature.FeatureName | UpperCamelCase }}: {data?.id}</SingleLayout.Title>
            <form action="">
                <GridFields className="py-6">
                {{- range $field := $feature.Fields | NoneID }}
                    <div className="sm:col-span-2">
                        <Label htmlFor="{{ .FieldNameCamelCase }}">
                            {{ .FieldNameHumanReadable }}
                        </Label>
                        {{- if $field | IsNumber }}
                        <NumberField
                            control={form.control}
                            name="{{ .FieldNameCamelCase }}"
                            defaultValue={data?.{{ .FieldNameCamelCase }}}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsBoolean }}
                        <Checkbox
                            control={form.control}
                            name="{{ $field.FieldNameCamelCase }}"
                            id="{{ $field.FieldNameCamelCase }}"
                            defaultValue={data?.{{ .FieldNameCamelCase }}}
                        />{{- end }}
                        {{- if $field | IsString }}
                        <InputField
                            control={form.control}
                            name="{{ .FieldNameCamelCase }}"
                            id="{{ .FieldNameCamelCase }}"
                            defaultValue={data?.{{ .FieldNameCamelCase }}}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsText }}
                        <TextareaField
                            id="{{ .FieldNameCamelCase }}"
                            name="{{ .FieldNameCamelCase }}"
                            control={form.control}
                            defaultValue={data?.{{ .FieldNameCamelCase }}}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsTime }}
                        <TimeField
                            id="{{ .FieldNameCamelCase }}"
                            name="{{ .FieldNameCamelCase }}"
                            control={form.control}
                            defaultValue={data?.{{ .FieldNameCamelCase }}?.toString()}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsDate }}
                        <DateField
                            id="{{ .FieldNameCamelCase }}"
                            name="{{ .FieldNameCamelCase }}"
                            control={form.control}
                            defaultValue={data?.{{ .FieldNameCamelCase }}?.toString()}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsFile }}
                        <FileField
                            id="{{ $field.FieldNameCamelCase }}"
                            name="{{ $field.FieldNameCamelCase }}"
                            resource={RESOURCE_NAME.toLowerCase()}
                            control={form.control}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                            defaultValue={data?.{{ .FieldNameCamelCase }}?.toString()}
                            onChange={e => {
                                if (!e) {
                                    form.setValue("{{ .FieldNameCamelCase }}", "");
                                    return
                                }
                                form.setValue("{{ .FieldNameCamelCase }}", e)
                            }}
                        />{{- end }}
                        {{- if $field | IsUndefined -}}
                        <InputField
                            {...form.register("{{ .FieldNameCamelCase }}")}
                            type="{{ $field | HTMLType }}"
                            id="{{ .FieldNameCamelCase }}"
                            defaultValue={data?.{{ .FieldNameCamelCase }}}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end}}
                    </div>
                {{- end }}
                </GridFields>
                <SingleLayout.Footer className="justify-between">
                    <div className="flex space-x-2">
                        <PrimaryButton onClick={form.handleSubmit(onSave)}>Save</PrimaryButton>
                        <SecondaryButton onClick={onCancel}>Cancel</SecondaryButton>
                    </div>
                    <ConfirmModal onConfirm={onDelete} title="Delete {{ .FeatureHumanReadableName }}" body={`Are you sure you want to delete ${data?.id}?`}>
                        Delete
                    </ConfirmModal>
                </SingleLayout.Footer>
            </form>
        </>
    )
}