{{ $feature := . -}}
import React, { useEffect } from "react";
import { useForm } from "react-hook-form";
import { Id } from "react-toastify";
import { useNavigate } from "react-router-dom";

import PrimaryButton from "@/app/components/buttons/primaryButton";
import CancelModal from "@/app/components/modals/cancelModal";
{{ if $feature | HasString -}}
import InputField from "@/app/components/inputs/inputField";
{{ end -}}
{{ if $feature | HasBoolean -}}
import Checkbox from "@/app/components/inputs/checkboxField";
{{ end -}}
{{if $feature | HasNumber -}}
import NumberField from "@/app/components/inputs/numberField";
{{ end -}}
{{if $feature | HasText -}}
import TextareaField from "@/app/components/inputs/textareaField";
{{ end -}}
{{if $feature | HasTime -}}
import TimeField from "@/app/components/inputs/timeField";
{{ end -}}
{{if $feature | HasDate -}}
import DateField from "@/app/components/inputs/dateField";
{{ end -}}
{{if $feature | HasFile -}}
import FileField from "@/app/components/inputs/fileField";
{{ end }}

import SingleLayout from "../../../components/singleView/layout";
import GridFields from "../../../components/singleView/gridFields/gridFields";
import Label from "../../../components/labels/label";
import { createToast, upsertToastError, upsertToastSuccess } from "../../../components/toastContainer/toasts";

import { {{ .FeatureNameCamelCaseUpper }} } from "../../model";
import useCreate{{ .FeatureNameCamelCaseUpper }} from "../../hooks/create{{ .FeatureNameCamelCaseUpper }}";
import { RESOURCE_URL } from "../../const";

export default function {{ $feature.FeatureNameCamelCaseUpper }}New() {
    const [executeMutation, { createLoading, createError, createResult }] = useCreate{{ .FeatureNameCamelCaseUpper }}();

    const navigate = useNavigate();

    const toastId = React.useRef<Id | null>(null);

    useEffect(() => {
        if (createResult && createResult > 0) {
            upsertToastSuccess(toastId);

            navigate(`/${RESOURCE_URL}`);
        }

        if (createError) {
            upsertToastError(toastId);

            console.error(createError);
        }

    }, [createResult, createError]);

    const {
        control,
        formState: {
            isDirty,
        },
        getValues,
        {{if $feature | HasFile -}} setValue, {{- end }}
        handleSubmit,
    } = useForm<{{ .FeatureNameCamelCaseUpper }}>({
        mode: "onBlur",
        criteriaMode: "all",
        defaultValues: {
            {{ range $field := $feature.Fields | NoneID }} {{ $field.FieldNameCamelCase }}: null, {{ end -}}
        }
    });

    const onCreate = () => {
        const values = getValues();

        toastId.current = createToast();

        executeMutation(values);
    }

    const onCancel = () => {
        navigate(`/${RESOURCE_URL}`)
    }

    return (
        <>
            <SingleLayout.Title>New {{ .FeatureNameCamelCaseUpper }}</SingleLayout.Title>
            <form>
                <GridFields className="py-6">
                {{- range $field := $feature.Fields | NoneID }}
                    <div className="sm:col-span-2">
                        <Label htmlFor="{{ $field.FieldNameCamelCase }}">
                            {{ .FieldNameHumanReadable }}
                        </Label>
                        {{- if $field | IsNumber }}
                        <NumberField
                            control={control}
                            name="{{ $field.FieldNameCamelCase }}"
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsBoolean }}
                        <Checkbox
                            control={control}
                            name="{{ $field.FieldNameCamelCase }}"
                            id="{{ $field.FieldNameCamelCase }}"
                        />{{- end }}
                        {{- if $field | IsString }}
                        <InputField
                            control={control}
                            name="{{ $field.FieldNameCamelCase }}"
                            id="{{ $field.FieldNameCamelCase }}"
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsText }}
                        <TextareaField
                            id="{{ .FieldNameCamelCase }}"
                            name="{{ $field.FieldNameCamelCase }}"
                            control={control}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsTime }}
                        <TimeField
                            id="{{ $field.FieldNameCamelCase }}"
                            name="{{ $field.FieldNameCamelCase }}"
                            control={control}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsDate }}
                        <DateField
                            id="{{ $field.FieldNameCamelCase }}"
                            name="{{ $field.FieldNameCamelCase }}"
                            control={control}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end }}
                        {{- if $field | IsFile }}
                        <FileField
                            id="{{ $field.FieldNameCamelCase }}"
                            name="{{ $field.FieldNameCamelCase }}"
                            resource={RESOURCE_URL.toLowerCase()}
                            control={control}
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                            defaultValue=""
                            onChange={e => {
                                if (!e) {
                                    setValue("{{ $field.FieldNameCamelCase }}", "");
                                    return
                                }
                                setValue("{{ $field.FieldNameCamelCase }}", e)
                            }}
                        />{{- end }}
                        {{- if $field | IsUndefined -}}
                        <InputField
                            control={control}
                            name="{{ $field.FieldNameCamelCase }}"
                            id="{{ $field.FieldNameCamelCase }}"
                            rules={
                                {
                                {{- if $field.Nullable | not }}
                                    required: "This field is required"
                                {{- end }}
                                }
                            }
                        />{{- end}}
                    </div>
                {{- end }}
                </GridFields>
                <SingleLayout.Footer>
                    <PrimaryButton
                        onClick={handleSubmit(onCreate)}
                        state={createLoading ? 'loading' : 'active'}
                    >
                        Create
                    </PrimaryButton>
                    <CancelModal
                        onConfirm={onCancel}
                        dontAsk={!isDirty}
                        className="border text-brand border-brand hover:bg-gray-fill active:bg-gray-stroke-weak"
                    >
                        Cancel
                    </CancelModal>
                </SingleLayout.Footer>
            </form>
        </>
    )
}