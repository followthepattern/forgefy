{{ $feature := . -}}
import { useForm } from "react-hook-form";
import useCreate{{ .FeatureNameCamelCaseUpper }} from "../hooks/create{{ .FeatureNameCamelCaseUpper }}";
import { useNavigate } from "react-router-dom";
import { RESOURCE_URL } from "../const";
import { useEffect } from "react";
import { {{ .FeatureNameCamelCaseUpper }} } from "../model";
import SingleLayout from "../../components/singleView/layout";
import GridFields from "../../components/singleView/gridFields/gridFields";
import Label from "../../components/labels/label";
import Input from "@/app/components/inputFields/input";
import SecondaryButton from "../../../components/buttons/secondaryButton";
import PrimaryButton from "../../../components/buttons/primaryButton";

{{- if $feature | HasBoolean -}}
import Checkbox from "@/app/components/inputFields/checkbox";
{{ end -}}
{{if $feature | HasNumber -}}
import NumberField from "@/app/components/inputFields/numberfield";
{{ end -}}
{{if $feature | HasText -}}
import Textarea from "@/app/components/inputFields/textarea";
{{ end -}}
{{if $feature | HasTime -}}
import TimeField from "@/app/components/inputFields/timefield";
{{ end -}}
{{if $feature | HasDate -}}
import DateField from "@/app/components/inputFields/datefield";
{{ end -}}
{{if $feature | HasFile -}}
import FileField from "@/app/components/inputFields/filefield";
{{ end }}

export default function {{ $feature.FeatureNameCamelCaseUpper }}New() {
    const [executeMutation, { createLoading, createError, createResult }] = useCreate{{ .FeatureNameCamelCaseUpper }}();

    const navigate = useNavigate();

    useEffect(() => {
        if (createResult && createResult > 0) {
            navigate(`/${RESOURCE_URL}`)
        }

    }, [createResult])

    const form = useForm<{{ .FeatureNameCamelCaseUpper }}>();

    const onCreate = () => {
        const values = form.getValues();

        executeMutation(values);
    }
    

    const onCancel = () => {
        navigate(`/${RESOURCE_URL}`)
    }

    return (
        <SingleLayout>
            <SingleLayout.Title>New {{ .FeatureNameCamelCaseUpper }}</SingleLayout.Title>
            <form>
                <GridFields className="py-6">
                {{- range $field := $feature.Fields | NoneID }}
                    <div className="sm:col-span-2">
                        <Label htmlFor="{{ .FieldNameCamelCase }}">
                            {{ .FieldNameHumanReadable }}
                        </Label>
                        {{- if $field | IsNumber }}
                        <NumberField
                            control={form.control}
                            name="{{ .FieldNameCamelCase }}"
                        />{{- end }}
                        {{- if $field | IsBoolean }}
                        <Checkbox
                            {...form.register("{{ .FieldNameCamelCase }}")}
                            id="{{ .FieldNameCamelCase }}"
                        />{{- end }}
                        {{- if $field | IsString }}
                        <Input
                            {...form.register("{{ .FieldNameCamelCase }}")}
                            id="{{ .FieldNameCamelCase }}"
                        />{{- end }}
                        {{- if $field | IsText }}
                        <Textarea
                            name="{{ .FieldNameCamelCase }}"
                            control={form.control}
                        />{{- end }}
                        {{- if $field | IsTime }}
                        <TimeField
                            name="{{ .FieldNameCamelCase }}"
                            control={form.control}
                        />{{- end }}
                        {{- if $field | IsDate }}
                        <DateField
                            name="{{ .FieldNameCamelCase }}"
                            control={form.control}
                        />{{- end }}
                        {{- if $field | IsFile }}
                        <FileField
                            control={form.control}
                            name="{{ .FieldNameCamelCase }}"
                            resource={RESOURCE_URL.toLowerCase()}
                            defaultValue=""
                            onChange={e => {
                                if (!e) {
                                    form.setValue("{{ .FieldNameCamelCase }}", "");
                                    return
                                }
                                form.setValue("{{ .FieldNameCamelCase }}", e)
                            }}
                        />{{- end }}
                        {{- if $field | IsUndefined -}}
                        <Input
                            {...form.register("{{ .FieldNameCamelCase }}")}
                            type="{{ $field | HTMLType }}"
                            id="{{ .FieldNameCamelCase }}"
                        />{{- end}}
                    </div>
                {{- end }}
                </GridFields>
                <SingleLayout.Footer className="justify-end">
                    <SecondaryButton onClick={onCancel}>Cancel</SecondaryButton>
                    <PrimaryButton onClick={onCreate}>Create</PrimaryButton>
                </SingleLayout.Footer>
            </form>
        </SingleLayout>
    )
}