import ChevronLeftIcon from "@/app/icons/chevronLeft";
import ChevronRightIcon from "@/app/icons/chevronRight";
import ChevronUpIcon from "@/app/icons/chevronUp";
import { Date as CustomDate, parseDate } from "@/lib/time";
import React from "react";
import { Button, Calendar, CalendarCell, CalendarGrid, CalendarGridBody, CalendarGridHeader, CalendarHeaderCell, DateInput, DatePicker as AriaDatePicker, DateSegment, Dialog, Group, Heading, Popover } from 'react-aria-components';
import type { ButtonProps, DatePickerProps, PopoverProps } from 'react-aria-components';
import { Control, Controller, ControllerRenderProps, FieldValues } from "react-hook-form";

interface DateFieldProperties extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {
    control: Control<FieldValues>
}

const DateField = (props: DateFieldProperties) => {
    let defaultCalendarDate: CustomDate | undefined;

    if (typeof (props.defaultValue) === "string") {
        defaultCalendarDate = parseDate(props.defaultValue);
    }

    return (
        <Controller
            name={props.name ?? ""}
            control={props.control}
            defaultValue={defaultCalendarDate}
            render={({ field }) => {

                return <DatePicker
                    {...field}
                    defaultValue={defaultCalendarDate}
                />
            }}
        />
    );
};

const DatePicker = React.forwardRef((props: DatePickerProps<CustomDate> & React.RefAttributes<HTMLDivElement> & ControllerRenderProps<FieldValues, string>, ref: React.ForwardedRef<HTMLDivElement>) => {
    const [value, setValue] = React.useState(props.defaultValue)

    return (
        <AriaDatePicker className="flex flex-col gap-1 group w-[250px]"
            {...props}
            ref={ref}
            value={value}
            onChange={v => {
                if (!v) {
                    return
                }
                const date = new CustomDate(v.year, v.month, v.day);
                props.onChange(date)
                setValue(date);
            }}
        >
            <Group className="flex pl-2 mt-2 text-gray-primary transition border rounded-lg bg-white/90 focus-within:bg-white group-open:bg-white ring-1 ring-inset ring-gray-100 focus:ring-0 focus:ring-inset">
                <DateInput className="flex flex-1 py-2">
                    {(segment) => (
                        <DateSegment
                            segment={segment}
                            className="px-0.5 tabular-nums outline-none rounded-sm focus:bg-brand-hover focus:text-white caret-transparent placeholder-shown:italic"
                        />
                    )}
                </DateInput>
                <Button className="flex items-center px-3 text-gray-primary transition bg-transparent border-0 border-l border-solid rounded-r-lg outline-none border-l-gray-200 pressed:bg-brand-hover focus-visible:ring-1 ring-black">
                    <ChevronUpIcon className="w-4 h-4 text-gray-primary" />
                </Button>
            </Group>
            <CalendarPopover>
                <Dialog className="p-6 text-gray-primary">
                    <Calendar>
                        <header className="flex items-center w-full gap-1 px-1 pb-4">
                            <Heading className="flex-1 ml-2 text-2xl font-semibold" />
                            <RoundButton slot="previous">
                                <ChevronLeftIcon className="w-4 h-4 text-gray-primary" />
                            </RoundButton>
                            <RoundButton slot="next">
                                <ChevronRightIcon className="w-4 h-4 text-gray-primary" />
                            </RoundButton>
                        </header>
                        <CalendarGrid className="border-separate border-spacing-1">
                            <CalendarGridHeader>
                                {(day) => (
                                    <CalendarHeaderCell className="text-xs font-semibold text-gray-stroke-strong">
                                        {day}
                                    </CalendarHeaderCell>
                                )}
                            </CalendarGridHeader>
                            <CalendarGridBody>
                                {(date) => (
                                    <CalendarCell
                                        date={date}
                                        className="flex items-center justify-center rounded-full outline-none cursor-default w-9 h-9 data-[outside-month]:text-gray-stroke-weak hover:bg-gray-100 data-[pressed]:bg-gray-200 data-[selected]:bg-brand-hover data-[selected]:text-white focus-visible:ring ring-brand/70 ring-offset-2"
                                    />
                                )}
                            </CalendarGridBody>
                        </CalendarGrid>
                    </Calendar>
                </Dialog>
            </CalendarPopover>
        </AriaDatePicker>
    )
})

function RoundButton(props: ButtonProps) {
    return (
        <Button
            {...props}
            className="flex items-center justify-center text-gray-primary bg-transparent border-0 rounded-full outline-none cursor-default w-9 h-9 hover:bg-gray-100 blue-violet-600/70 ring-offset-2"
        />
    );
}

function CalendarPopover(props: PopoverProps) {
    return (
        <Popover
            {...props}
            className={({ isEntering, isExiting }) => `
          overflow-auto rounded-lg drop-shadow-lg ring-1 ring-black/10 bg-white
          ${isEntering
                    ? 'animate-in fade-in placement-bottom:slide-in-from-top-1 placement-top:slide-in-from-bottom-1 ease-out duration-200'
                    : ''
                }
          ${isExiting
                    ? 'animate-out fade-out placement-bottom:slide-out-to-top-1 placement-top:slide-out-to-bottom-1 ease-in duration-150'
                    : ''
                }
        `}
        />
    );
}

export default DateField;