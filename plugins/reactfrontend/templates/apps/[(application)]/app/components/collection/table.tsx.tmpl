import { createPortal } from 'react-dom';
import React, {
    ReactElement,
    useContext,
    useState,
    createContext,
    Fragment,
    useRef
} from "react";

import { Link } from "react-router-dom";
import classNames from "classnames";
import { ToHumanReadable } from "@/lib/strings";
import EllipsisVerticalIcon from "@/app/icons/ellipsisVertical";
import { Transition, Popover } from '@headlessui/react'
import { Identifable, CollectionItem } from './itemCollection';
import ConfirmModal from '@/app/(account)/components/modals/confirmModal';

interface ColumnProperteis {
    className?: string
    children?: any
    key?: string
}

export function Column(props: ColumnProperteis, key: any) {
    return (
        <th
            {...props}
            className={classNames(props.className, "py-3")}
            key={key}
        >
            {props.children}
        </th>
    )
}

interface RowProperties<T> {
    className?: string
    children?: any
    element?: T
    isSelected?: boolean
    key?: string
    onContextMenu?: React.MouseEventHandler<HTMLTableRowElement>
}

interface RowContext {
    isSelected: boolean
    setRowSelected: (v: boolean) => void
}

const rowContext = createContext<RowContext | null>(null);

export function Row<T>(props: RowProperties<T>, key: string) {
    let state = {
        isSelected: props.isSelected ?? false,
    }

    return (
        <rowContext.Provider
            value={
                {
                    isSelected: state.isSelected,
                    setRowSelected: (value: boolean) => {

                    }
                }}
        >
            <tr
                onContextMenu={props.onContextMenu}
                className={
                    classNames(props.className,
                        "",
                        {
                            "hover:bg-gray-fill": !props.isSelected,
                            "bg-gray-stroke-weak": props.isSelected,
                        })}
                key={key}
            >
                {props.children}
            </tr>
        </rowContext.Provider>
    )
}

interface CellProperties {
    className?: string
    children?: any
}

export function Cell(props: CellProperties, key: string) {
    return (
        <td
            className={classNames(props.className, "py-2 font-medium text-gray-primary whitespace-nowra")}
            key={key}
        >
            {props.children}
        </td>
    )
}

interface CheckboxProperties {
    className?: string
    onChange?: React.ChangeEventHandler<HTMLInputElement>
    checked?: boolean
    defaultValue?: boolean
}

function Checkbox(props: CheckboxProperties) {
    let state = {
        isSelected: props.checked
    }

    const rowProps = useContext(rowContext);

    if (rowProps) {
        if (state.isSelected === undefined) state.isSelected = rowProps.isSelected;
    }

    return (
        <input
            type="checkbox"
            onChange={e => {
                if (props.onChange) {
                    props.onChange(e);
                }
            }}
            className={classNames(props.className, "block w-6 h-6 border rounded-lg focus:ring-1")}
            checked={state.isSelected}
        />
    )
}


interface TableHeaderProperties {
    children?: any
    className?: string
}

export function TableHeader<T>(props: TableHeaderProperties) {
    return (
        <thead
            className={classNames(props.className, "text-xs text-gray-supporting uppercase gray-fill border-b border-gray-fill")}
            {...props}
        >
            <tr>
                {props.children}
            </tr>
        </thead>
    )
}

interface TableBodyProperties<T extends Identifable> {
    children?: (item: CollectionItem<T>) => ReactElement | any
    className?: string
    items?: CollectionItem<T>[]
}

export function TableBody<T extends Identifable>(props: TableBodyProperties<T>) {
    let component: any

    if (typeof (props.children) == "function" && props.items) {
        let fn = props.children
        component = props.items.map(item => fn(item))
    }

    return (
        <tbody
            className={classNames(props.className, "divide-y divide-gray-fill")}
            {...props}
        >
            {component}
        </tbody>
    )
}

interface ColumnLabel {
    id: string
    name: string
}

export interface TableProperties<T extends Identifable> {
    className?: string
    columns: ColumnLabel[]
    items: CollectionItem<T>[]
    toEditLink: (v: T) => string
    toViewLink: (v: T) => string

    areAllSelected: boolean
    onToggle?: (v: string) => void
    onUnselectAll?: () => void
    onSelectAll?: () => void

    onDelete?: (v: T[]) => void
}

export function Table<T extends Identifable>(props: TableProperties<T>) {
    return (
        <>
            <table
                className={classNames(props.className, "relative min-w-full table-fixed text-sm text-left text-gray-stroke-strong")}
            >
                <TableHeader>
                    <Column
                        key="key-select-all"
                        className="pl-4 sm:w-10"
                    >
                        <Checkbox
                            onChange={() => {
                                if (props.areAllSelected) {
                                    props.onUnselectAll?.()
                                    return;
                                }
                                props.onSelectAll?.()
                            }}
                            checked={props.areAllSelected}
                        />
                    </Column>
                    {props.columns.map(column => (
                        <Column
                            className="px-6"
                            key={column.id}
                        >
                            {column.name}
                        </Column>
                    ))}
                    <Column
                        key="key-actions"
                        className="px-6 text-right "
                    />
                </TableHeader>
                <TableBody items={props.items}>
                    {(item) => (
                        <Row
                            isSelected={item.selected}
                            key={item.id}
                        >
                            <Cell
                                className="px-4"
                            >
                                <Checkbox
                                    onChange={
                                        () => {
                                            if (props.onToggle) {
                                                props.onToggle(item.id);
                                            }
                                        }
                                    }
                                />
                            </Cell>
                            {props.columns.map(column =>
                                <Cell
                                    key={item.id + column.id}
                                    className="px-6"
                                >
                                    <Link to={props.toViewLink(item)}>
                                        {ToHumanReadable((item as any)[column.id])}
                                    </Link>
                                </Cell>
                            )}
                            <Cell className="flex justify-end px-6 text-right" key={item.id}>
                                <PopoverWithPortal
                                    item={item}
                                    toEdit={props.toEditLink(item)}
                                    onDelete={v => {
                                        if (props.onDelete) {
                                            props.onDelete([v])
                                        }
                                    }}
                                >
                                    <EllipsisVerticalIcon className="h-5" />
                                </PopoverWithPortal>
                            </Cell>
                        </Row>
                    )}
                </TableBody>
            </table>
        </>
    )
}

interface PopoverProperties<T extends Identifable> {
    item: T
    toEdit: string
    onDelete?: (v: T) => void
    children?: any
}

function PopoverWithPortal<T extends Identifable>(props: PopoverProperties<T>) {
    const buttonRef = useRef<HTMLButtonElement>(null);
    const [coords, setCoords] = useState({ x: 0, y: 0 });

    return (
        <Popover>
            {() => (
                <>
                    <Popover.Button
                        ref={buttonRef}
                        onClick={() => {
                            const rect = buttonRef.current?.getBoundingClientRect();
                            if (rect) {
                                const menuWidth = 140;
                                const right = rect.right;
                                setCoords({ x: right - menuWidth, y: rect.bottom + 5 });
                            }
                        }}
                        className="px-2 py-1 bg-gray-200 rounded"
                    >
                        {props.children}
                    </Popover.Button>

                    {createPortal(
                        <Transition
                            as={Fragment}
                            enter="transition ease-out duration-100"
                            enterFrom="transform opacity-0 scale-95"
                            enterTo="transform opacity-100 scale-100"
                            leave="transition ease-in duration-75"
                            leaveFrom="transform opacity-100 scale-100"
                            leaveTo="transform opacity-0 scale-95"
                        >
                            <Popover.Panel
                                static
                                className="fixed right-0 z-50 flex flex-col w-[140px] bg-white border rounded-md shadow-lg border-gray-stroke-weak"
                                style={{ "{{" }} top: coords.y, left: coords.x }}
                            >
                                <ul className="flex flex-col">
                                    <li className="flex">
                                        <Link
                                            className="w-full px-4 py-2 text-base text-left hover:bg-gray-fill active:bg-gray-stroke-weak"
                                            to={props.toEdit}
                                        >
                                            Edit
                                        </Link>
                                    </li>
                                    <li className="flex">
                                        <ConfirmModal
                                            className="flex w-full"
                                            onConfirm={() => {
                                                if (props.onDelete) {
                                                    props.onDelete(props.item)
                                                }
                                            }}
                                            title="Delete item?"
                                            body={`This action will permanently delete ${props.item.id}. This cannot be undone.`}
                                        >
                                            <button
                                                className="w-full px-4 py-2 text-base text-left hover:bg-gray-fill active:bg-gray-stroke-weak"
                                            >
                                                Delete
                                            </button>
                                        </ConfirmModal>
                                    </li>
                                </ul>
                            </Popover.Panel>
                        </Transition>,
                        document.body
                    )}
                </>
            )}
        </Popover>
    );
}
