import ChevronLeftIcon from "@/app/icons/chevronLeft";
import ChevronRightIcon from "@/app/icons/chevronRight";
import ChevronUpIcon from "@/app/icons/chevronUp";
import { Date as CustomDate, parseDate } from "@/lib/time";
import classNames from "classnames";
import React, { RefAttributes } from "react";
import {
    Button,
    Calendar,
    CalendarCell,
    CalendarGrid,
    CalendarGridBody,
    CalendarGridHeader,
    CalendarHeaderCell,
    DateInput,
    DatePicker as AriaDatePicker,
    DateSegment,
    Dialog,
    Group,
    Heading,
    Popover
} from 'react-aria-components';
import type { ButtonProps, DatePickerProps, PopoverProps } from 'react-aria-components';
import { useController, UseControllerProps } from "react-hook-form";
import ErrorLabel from "./inputErrorLabel";

interface DateFieldProperties extends UseControllerProps {
    id?: string;
    className?: string;
    disabled?: boolean;
}

const DateField = (props: DateFieldProperties) => {
    let defaultCalendarDate: CustomDate | null | undefined;

    if (typeof (props.defaultValue) === "string") {
        defaultCalendarDate = parseDate(props.defaultValue);
    }

    if (props.defaultValue instanceof CustomDate) {
        defaultCalendarDate = props.defaultValue;
    }

    const [value, setValue] = React.useState(defaultCalendarDate);
    const { field, fieldState: { invalid, error } } = useController({
        ...props,
        defaultValue: defaultCalendarDate,
    });

    return (
        <div className={classNames(
            props.className,
            "mt-2"
        )}>
            {invalid && <ErrorLabel errorMessage={error?.message} />}
            <DatePicker
                id={props.id}
                name={props.name}
                value={value}
                onChange={v => {
                    if (!v) {
                        setValue(null);
                        field.onChange(null);
                        return
                    }

                    const date = new CustomDate(v.year, v.month, v.day);
                    setValue(date);
                    field.onChange(date);
                }}
                onBlur={field.onBlur}
                invalid={invalid}
            />
        </div>
    )
};

interface DatePickerProperties extends DatePickerProps<CustomDate>, RefAttributes<HTMLDivElement> {
    invalid: boolean
}

const DatePicker = React.forwardRef((props: DatePickerProperties, ref: React.ForwardedRef<HTMLDivElement>) => {


    return (
        <AriaDatePicker className="flex flex-col space-x-2 group w-[250px]"
            {...props}
            ref={ref}
            value={props.value}
            onChange={v => {
                if (props.onChange) { props.onChange(v); }
            }}
        >
            <Group className={classNames(
                "flex pl-2 transition border rounded-lg focus-within:bg-white group-open:bg-white ring-1 ring-inset ring-gray-fill focus:ring-0 focus:ring-inset",
                {
                    "border-gray-stroke-strong bg-white/90 text-gray-primary": !props.invalid,
                    "border-error bg-error-fill text-error": props.invalid,
                }
            )}
            >
                <DateInput className="flex flex-1 py-2">
                    {(segment) => (
                        <DateSegment
                            segment={segment}
                            className="px-0.5 tabular-nums outline-none rounded-sm focus:bg-brand focus:text-white caret-transparent placeholder-shown:italic"
                        />
                    )}
                </DateInput>
                <OpenCalendarPopover invalid={props.invalid} />
            </Group>
            <CalendarPopover>
                <Dialog className="p-6 text-gray-primary">
                    <Calendar>
                        <header className="flex items-center w-full gap-1 px-1 pb-4">
                            <Heading className="flex-1 ml-2 text-2xl font-semibold" />
                            <HighlightButton slot="previous">
                                <ChevronLeftIcon className="w-4 h-4 text-gray-primary" />
                            </HighlightButton>
                            <HighlightButton slot="next">
                                <ChevronRightIcon className="w-4 h-4 text-gray-primary" />
                            </HighlightButton>
                        </header>
                        <CalendarGrid className="border-separate border-spacing-1">
                            <CalendarGridHeader>
                                {(day) => (
                                    <CalendarHeaderCell className="text-xs font-semibold text-gray-stroke-strong">
                                        {day}
                                    </CalendarHeaderCell>
                                )}
                            </CalendarGridHeader>
                            <CalendarGridBody>
                                {(date) => (
                                    <CalendarCell
                                        date={date}
                                        className="flex items-center justify-center rounded-full outline-none cursor-default w-9 h-9 data-[outside-month]:text-gray-stroke-weak hover:bg-gray-fill data-[pressed]:bg-gray-fill data-[selected]:bg-brand data-[selected]:text-white focus-visible:ring ring-brand/70 ring-offset-2"
                                    />
                                )}
                            </CalendarGridBody>
                        </CalendarGrid>
                    </Calendar>
                </Dialog>
            </CalendarPopover>
        </AriaDatePicker>
    )
})

function OpenCalendarPopover({ invalid }: { invalid: boolean }) {
    return (
        <Button className="flex items-center px-3 transition bg-transparent border-0 border-l rounded-r-lg outline-none border-l-gray-fill active:bg-gray-fill">
            <ChevronUpIcon className={classNames(
                "w-4 h-4",
                {
                    "text-gray-primary": !invalid,
                    "text-error": invalid,
                }
            )}
            />
        </Button>
    )
}

function HighlightButton(props: ButtonProps) {
    return (
        <Button
            {...props}
            className="flex items-center justify-center bg-transparent border-0 rounded-full outline-none cursor-default text-gray-primary w-9 h-9 hover:bg-gray-fill ring-offset-0"
        />
    );
}

function CalendarPopover(props: PopoverProps) {
    return (
        <Popover
            {...props}
            className={({ isEntering, isExiting }) => `
          overflow-auto rounded-lg drop-shadow-lg ring-1 ring-black/10 bg-white
          ${isEntering
                    ? 'animate-in fade-in placement-bottom:slide-in-from-top-1 placement-top:slide-in-from-bottom-1 ease-out duration-200'
                    : ''
                }
          ${isExiting
                    ? 'animate-out fade-out placement-bottom:slide-out-to-top-1 placement-top:slide-out-to-bottom-1 ease-in duration-150'
                    : ''
                }
        `}
        />
    );
}

export default DateField;