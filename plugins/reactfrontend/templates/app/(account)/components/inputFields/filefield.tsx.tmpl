import { useStorage, useUploadFile } from '@/lib/storage';
import classNames from 'classnames';
import React, { useEffect, useState } from 'react';
import { FileTrigger, Button } from 'react-aria-components';
import { Control, Controller, FieldValues } from 'react-hook-form';

interface FileFieldProperties extends FileComponentProperties {
    control: Control<FieldValues>
}

function FileField(props: FileFieldProperties) {
    return (
        <Controller
            name={props.name}
            control={props.control}
            defaultValue={props.defaultValue}
            render={({ field }) => {
                return <FileComponent
                    {...props}
                    {...field}
                    onChange={props.onChange}
                    defaultValue={field.value}
                />
            }}
        />
    )
}

interface FileComponentProperties {
    name: string
    resource: string
    resourceId: string
    className?: string
    defaultValue?: string
    onChange?: (filePath: string | null) => void
}

const FileComponent = React.forwardRef((props: FileComponentProperties, ref: React.ForwardedRef<HTMLInputElement>) => {
    let value: string[] | undefined;

    if (typeof props.defaultValue === "string" && props.defaultValue.length != 0) {
        value = props.defaultValue.split(",")
    }
    const [file, setFile] = useState<string[] | undefined>(value);

    const { download } = useStorage();

    const { data, called, execute } = useUploadFile();

    useEffect(() => {
        if (!called) {
            return
        }

        if (props.onChange) {
            props.onChange(data)
        }
        if (data) {
            setFile([data]);
        } else {
            setFile(undefined);
        }

    }, [called, data])

    return (
        <>
            {file &&
                <div className="mt-2 space-y-2">
                    {file.map(file =>
                        <Attachment
                            key={file}
                            filePath={file}
                            onDownloadClick={() => { download(file) }}
                            onRemoveClick={() => {
                                if (props.onChange) {
                                    props.onChange(null)
                                }
                                setFile(undefined);
                            }}
                        />
                    )}
                </div>}
            <FileTrigger
                {...props}
                allowsMultiple={false}
                ref={ref}
                onSelect={e => {
                    if (!e) {
                        return
                    }
                    let files = Array.from(e);
                    execute(files[0], props.resource, props.resourceId)
                }}>
                <Button
                    className={classNames(props.className, "mt-2 px-1 py-1 font-semibold text-blue-500 border border-blue-500 rounded-lg hover:bg-blue-50 focus:bg-blue-100")}
                >{file ? "Change" : "Select"}</Button>
            </FileTrigger>
        </>
    )
})

interface AttachmentProperties {
    className?: string;
    filePath: string;
    onDownloadClick: () => void
    onRemoveClick: () => void
}

const Attachment = (props: AttachmentProperties) => {
    const fileName = props.filePath.split(/(\\|\/)/).pop() ?? props.filePath;

    return (
        <div className={classNames(props.className, "flex justify-between w-full px-3 py-2 mt-2 border border-gray-300 rounded-lg ring-1 ring-inset ring-gray-100 placeholder:text-gray-400 focus:ring-0 focus:ring-inset")}>
            <span>{fileName}</span>
            <div className="space-x-2">
                <DownloadButton onClick={props.onDownloadClick} />
                <span>|</span>
                <RemoveButton onClick={props.onRemoveClick} />
            </div>
        </div>
    )
}

interface DownloadButtonProperties extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> { }

const DownloadButton = (props: DownloadButtonProperties) => {
    return (
        <button
            {...props}
            type="button"
            className={classNames(props.className, "text-blue-600 hover:blue-600 focus:blue-700 font-medium")}
        >
            Download
        </button>
    )
}

interface RemoveButtonProperties extends React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> { }

const RemoveButton = (props: RemoveButtonProperties) => {
    return (
        <button
            {...props}
            type="button"
            className={classNames(props.className, "text-gray-600 hover:gray-600 focus:gray-700 font-medium")}
        >
            Remove
        </button>
    )
}

export default FileField;