{{ $feature := . -}}

import { update{{ $feature.FeatureNameCamelCaseUpper }} as graphQL } from "../graphql/mutation";
import { UpdateMutationResult } from "@/graphql/mutation";
import { {{ $feature.FeatureNameCamelCaseUpper }}, MutationResponse } from "../model";
import useUpdate from "@/graphql/hooks/useUpdate";
{{if $feature | HasTime -}}
import { TimeToISO8601 } from "@/lib/time";
{{ end -}}
{{if $feature | HasDate -}}
import { CalendarDateTimeToISO8601 } from "@/lib/time";
{{ end -}}

export default function useUpdate{{ .FeatureNameCamelCaseUpper }}(): UpdateMutationResult<{{ $feature.FeatureNameCamelCaseUpper }}, number | undefined> {
    const parseResult = (data?: MutationResponse | null): number | undefined => {
        return data?.{{ $feature.FeatureNameCamelCase }}s?.update?.code;
    }

    const [execute, { updateResult, updateLoading, updateError }] = useUpdate({ parseResult, graphQL });

    const parseVariable = (id: string, model: {{ $feature.FeatureNameCamelCaseUpper }}) => {
        const val = {
            {{ range $field := $feature.Fields }}
            {{ $field.FieldNameCamelCase }}: model.{{ $field.FieldNameCamelCase }}?.toString(),
            {{- end -}}
        }

        execute(id, val)
    }

    return [parseVariable, { updateResult, updateLoading, updateError }]
}