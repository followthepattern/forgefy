{{ $feature := . -}}

import { CreateMutationResult, MutationResourceResponse } from "@/graphql/mutation";
import { {{ .FeatureNameCamelCaseUpper }}, MutationResponse  } from "../model";
import useCreate from "@/graphql/hooks/useCreate";
import { create{{ .FeatureNameCamelCaseUpper }} as graphQL } from "../graphql/mutation";

export default function useCreate{{ .FeatureNameCamelCaseUpper }}(): CreateMutationResult<{{ .FeatureNameCamelCaseUpper }}, number> {
    const parseResult = (data?: MutationResponse | null) : number | undefined  => {
        return data?.{{ .FeatureNameCamelCase }}s?.create?.code;
    }

    const [execute, { createResult, createLoading, createError}] = useCreate({parseResult, graphQL});

    const parseVariable = (model: {{ $feature.FeatureNameCamelCaseUpper }}) => {
        const val = {
            {{ range $field := $feature.Fields | NoneID }}
            {{ $field.FieldNameCamelCase }}: model.{{ $field.FieldNameCamelCase }}?.toString(),
            {{- end -}}
        }

        execute(val)
    }

    return [parseVariable, { createResult, createLoading, createError }]
}