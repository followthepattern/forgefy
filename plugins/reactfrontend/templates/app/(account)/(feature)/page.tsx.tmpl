import SectionHeader from '../components/listPage/sectionHeader/sectionHeader';
import List from '../components/listPage/listPage';
import { ListPageComponentProperties } from '../components/listPage/listPageWrapper/listPageWrapper';
import { SortLabel, SetPageParams, SetSearchPatternParams, SetSortPatternParrams } from '../components/listPage/listPageWrapper/listingFunctions';
import useList{{ .FeatureNameCamelCaseUpper }} from './hooks/list{{ .FeatureNameCamelCaseUpper }}';
import CreateTable, { CreateTableProperties } from '../components/listPage/table/table';
import { {{ .FeatureNameCamelCaseUpper }} } from './model';
import { ToStringOrDefault } from '@/lib/strings';

export const RESOURCE_NAME = "{{ .FeatureHumanReadableName }}"
export const RESOURCE_URL = "/{{ .FeatureNameURL }}s"

const sortByLables: SortLabel[] = [{{- range .Fields }}
  {
    code: "{{ .FieldNameSnakeCaseLower }}",
    name: "{{ .FieldNameHumanReadable }}",
    asc: true,
  },
{{- end }}
];

function {{ .FeatureNameCamelCase }}ViewLink(value: {{ .FeatureNameCamelCaseUpper }}): string {
  return `/{{ .FeatureNameURL }}s/${value.{{ .IDField.FieldNameCamelCase }}}`
}

function {{ .FeatureNameCamelCase }}EditLink(value: {{ .FeatureNameCamelCaseUpper }}): string {
  return `/{{ .FeatureNameURL }}s/${value.{{ .IDField.FieldNameCamelCase }}}/edit`
}

function getCreateTableProperties(): CreateTableProperties<{{ .FeatureNameCamelCaseUpper }}> {
  return {
    headerColumns: [{{- range .Fields }}"{{ .FieldNameHumanReadable }}", {{- end }}],
    getViewLink: {{ .FeatureNameCamelCase }}ViewLink,
    getEditLink: {{ .FeatureNameCamelCase }}EditLink,
    getCells: (entity) => [{{- range .Fields }}ToStringOrDefault(entity.{{ .FieldNameCamelCase }}), {{- end }}]
  }
}

export default function {{ .FeatureNameCamelCaseUpper }}s(props: ListPageComponentProperties) {
  const sortOnChange = (sortLabel: SortLabel) => {
    SetSortPatternParrams(props.searchParams, props.setSearchParams, sortLabel);
  }

  const searchInputOnChange = (searchString: string) => {
    SetSearchPatternParams(props.searchParams, props.setSearchParams, searchString);
  }

  const pageOnChange = (page: number) => {
    SetPageParams(props.searchParams, props.setSearchParams, page);
  }

  const selectedSortLabel = sortByLables.find(l => l.code == props.sortProps.sortLabel?.code);

  const createTableProperties = getCreateTableProperties();

  const entityTable = CreateTable(createTableProperties);

  return (
    <div className="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
      <SectionHeader
        resourceName={RESOURCE_NAME}
        resourceUrl={RESOURCE_URL}
        searchInputOnChange={searchInputOnChange}
        sortOnChange={sortOnChange}
        searchInput={props.filterProps.searchString}
        sortByLables={sortByLables}
        selectedSortLabel={selectedSortLabel}
      />
      <div className="flow-root mt-8 overflow-hidden">
        <List {...props}
          sortProps={{ "{{" }}sortLabel: selectedSortLabel {{ "}}" }}
          onPageChange={pageOnChange}
          useList={useList{{ .FeatureNameCamelCaseUpper }}}
          tableComponent={entityTable}
        />
      </div>
    </div>
  )
}