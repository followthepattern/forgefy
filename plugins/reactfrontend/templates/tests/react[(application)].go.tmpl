{{ $app := .App -}}

package tests

import (
	"context"
	"path"
	"path/filepath"
	"time"

	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/network"
	"github.com/testcontainers/testcontainers-go/wait"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

const (
	CypressImage = "cypress/included:13.16.1"
	NodeImage    = "node:21.2.0"
)

func testing{{ $app.AppName | UpperCamelCase }}() {
	{{ $app.AppName | LowerCamelCase }}SourceDir := "../apps/{{ $app.AppName | LowerCamelCase }}"
	{{ $app.Backend | LowerCamelCase }}SourceDir := "../apps/{{ $app.Backend | LowerCamelCase }}"

	Describe("End to end tests for Go Back-end", func() {
		var (
			ctx     context.Context
			testNet *testcontainers.DockerNetwork
		)

		BeforeAll(func() {
			var err error
			{{ $app.AppName | LowerCamelCase }}SourceDir, err = filepath.Abs({{ $app.AppName | LowerCamelCase }}SourceDir)
			Expect(err).To(BeNil())

			{{ $app.Backend | LowerCamelCase }}SourceDir, err = filepath.Abs({{ $app.Backend | LowerCamelCase }}SourceDir)
			Expect(err).To(BeNil())
		})

		BeforeEach(func() {
			ctx = context.Background()

			var err error
			testNet, err = network.New(ctx)
			Expect(err).To(BeNil())
			defer testcontainers.CleanupNetwork(GinkgoTB(), testNet)
		})

		It("runs cypress tests", func() {
			ctx := context.Background()
			cleanUpFn := TryRun{{ $app.Backend | UpperCamelCase }}AsService(
				{{ $app.AppName | LowerCamelCase }}SourceDir,
				testNet.Name,
				filepath.Join({{ $app.Backend | LowerCamelCase }}SourceDir, "tests", "integration", "testdata", "database.sql"),
			)
			defer cleanUpFn()

			cont := TryRun{{ $app.AppName | UpperCamelCase }}(
				ctx,
				{{ $app.AppName | LowerCamelCase }}SourceDir,
				WithNetwork(testNet.Name),
			)
			defer testcontainers.CleanupContainer(GinkgoTB(), cont)

			TryRunCypress(
				ctx,
				path.Join({{ $app.AppName | LowerCamelCase }}SourceDir, "e2e"),
				WithNetwork(testNet.Name),
			)
		})

	})
}

func TryRun{{ $app.AppName | UpperCamelCase }}(
	ctx context.Context,
	src string,
	opts ...testcontainers.ContainerCustomizer) testcontainers.Container {
	req := testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:        NodeImage,
			Name:         "{{ $app.AppName | LowerCamelCase }}",
			WorkingDir:   "/src",
			ExposedPorts: []string{"3000/tcp"},
			Cmd:          []string{"bash", "-c", "npm install && npm run dev"},
			WaitingFor:   wait.ForLog("compiled successfully").WithStartupTimeout(5 * time.Minute),
		},
		Started: true,
	}

	opts = append(opts,
		WithMount(src, req.WorkingDir),
	)

	for _, opt := range opts {
		err := opt.Customize(&req)
		Expect(err).To(BeNil())
	}
	cont, err := testcontainers.GenericContainer(ctx, req)
	Expect(err).To(BeNil())

	return cont
}

func TryRunCypress(
	ctx context.Context,
	src string,
	opts ...testcontainers.ContainerCustomizer) {
	req := testcontainers.GenericContainerRequest{
		ContainerRequest: testcontainers.ContainerRequest{
			Image:      CypressImage,
			Name:       "cypress",
			WorkingDir: "/e2e",
			Cmd:        []string{"cypress", "run"},
			WaitingFor: wait.ForLog("All specs passed!").WithStartupTimeout(5 * time.Minute),
		},
		Started: true,
	}

	opts = append(opts,
		WithMount(src, req.WorkingDir),
	)

	for _, opt := range opts {
		err := opt.Customize(&req)
		Expect(err).To(BeNil())
	}
	cont, err := testcontainers.GenericContainer(ctx, req)
	defer testcontainers.CleanupContainer(GinkgoTB(), cont)
	Expect(err).To(BeNil(), "cypress tests did not pass successfully")
}
