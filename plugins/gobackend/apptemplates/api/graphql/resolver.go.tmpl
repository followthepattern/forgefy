package graphql

import (
	"github.com/{{ .AppNameToPackageName }}/controllers"
	"github.com/{{ .AppNameToPackageName }}/features/auth"
	{{ $AppNameToPackageName := .AppNameToPackageName }}
{{- range .Features }}
	"github.com/{{ $AppNameToPackageName }}/features/{{ .FeatureNamePackage }}"
{{- end }}
)

type Resolver struct {
	authGraphQL	auth.AuthGraphQL

{{- range .Features }}
	{{ .FeatureNameCamelCase }}GraphQL	{{ .FeatureNamePackage }}.{{ .FeatureNameGo }}GraphQL
{{- end }}
}

func NewResolver(controllers controllers.Controllers) Resolver {
	authGraphQL := auth.NewAuthGraphQL(controllers.Auth())
	
{{- range .Features }}
	{{ .FeatureNameCamelCase }}GraphQL := {{ .FeatureNamePackage}}.New{{ .FeatureNameGo }}GraphQL(controllers.{{ .FeatureNameGo }}())
{{- end }}


	resolver := Resolver{
		authGraphQL:	authGraphQL,
{{- range .Features }}
		{{ .FeatureNameCamelCase }}GraphQL: {{ .FeatureNameCamelCase }}GraphQL,
{{- end }}
	}

	return resolver
}

func (r Resolver) Authentication() (auth.AuthGraphQL, error) {
	return r.authGraphQL, nil
}

func (r Resolver) Auth() (auth.AuthGraphQL, error) {
	return r.authGraphQL, nil
}

{{- range .Features }}
func (r Resolver) {{ .FeatureNameGo }}s() ({{ .FeatureNamePackage }}.{{ .FeatureNameGo }}GraphQL, error) {
	return r.{{ .FeatureNameCamelCase }}GraphQL, nil
}
{{- end }}