package {{ .PackageName }}

import (
	"context"
	"log/slog"

	"github.com/{{ .AppNameToPackageName }}/accesscontrol"
	"github.com/{{ .AppNameToPackageName }}/container"
	"github.com/{{ .AppNameToPackageName }}/features/auth"
	"github.com/{{ .AppNameToPackageName }}/types"
	"github.com/google/uuid"
)

type {{ .FieldTypeGoName }}Service struct {
	authorizationService auth.AuthorizationService
	logger               *slog.Logger
	{{ .FeatureNameLowerCamel }}Repository	{{ .FieldTypeGoName }}Database
}

func New{{ .FieldTypeGoName }}Service(cont container.Container, authorizationService auth.AuthorizationService) {{ .FieldTypeGoName }}Service {
	repository := New{{ .FieldTypeGoName }}Database(cont.GetDB())
	service := {{ .FieldTypeGoName }}Service{
		authorizationService: authorizationService,
		{{ .FeatureNameLowerCamel }}Repository:    repository,
		logger:	cont.GetLogger(),
	}

	return service
}

func (service {{ .FieldTypeGoName }}Service) GetByID(ctx context.Context, id string) (*{{ .FieldTypeGoName }}Model, error) {
	err := service.authorizationService.Authorize(ctx, accesscontrol.READ, id)
	if err != nil {
		return nil, err
	}

	return service.{{ .FeatureNameLowerCamel }}Repository.GetByID(id)
}

func (service {{ .FieldTypeGoName }}Service) Get(ctx context.Context, request {{ .FieldTypeGoName }}ListRequestParams) (*{{ .FieldTypeGoName }}ListResponse, error) {
	err := service.authorizationService.Authorize(ctx, accesscontrol.READ, accesscontrol.ALLRESOURCE)
	if err != nil {
		return nil, err
	}

	request.Pagination.SetDefaultIfEmpty()

	return service.{{ .FeatureNameLowerCamel }}Repository.Get(request)
}

func (service {{ .FieldTypeGoName }}Service) Create(ctx context.Context, value {{ .FieldTypeGoName }}Model) error {
	userID, err := service.authorizationService.AuthorizedUser(ctx, accesscontrol.CREATE, accesscontrol.NEW)
	if err != nil {
		return err
	}

	value.ID = types.StringFrom(uuid.NewString())
	value.Userlog.CreationUserID = types.StringFrom(userID)

	return service.{{ .FeatureNameLowerCamel }}Repository.Create([]{{ .FieldTypeGoName }}Model{value})
}

func (service {{ .FieldTypeGoName }}Service) Update(ctx context.Context, value {{ .FieldTypeGoName }}Model) error {
	userID, err := service.authorizationService.AuthorizedUser(ctx, accesscontrol.UPDATE, value.ID.Data)
	if err != nil {
		return err
	}

	value.UpdateUserID = types.StringFrom(userID)

	return service.{{ .FeatureNameLowerCamel }}Repository.Update(value)
}

func (service {{ .FieldTypeGoName }}Service) Delete(ctx context.Context, id string) error {
	err := service.authorizationService.Authorize(ctx, accesscontrol.DELETE, id)
	if err != nil {
		return err
	}

	return service.{{ .FeatureNameLowerCamel }}Repository.Delete(id)
}
