package {{ .FeatureNamePackage }}

import (
	"github.com/{{ .AppNamePackage }}/models"
	"github.com/{{ .AppNamePackage }}/types"
	validation "github.com/go-ozzo/ozzo-validation"
)

type {{ .FeatureNameGo }}Model struct {
	{{- range .Fields }}
	{{ .FieldNameCamelCaseUpper }} {{ .FieldTypeGo }} `db:"{{ .FieldNameDB }}" goqu:"omitempty"`
	{{- end }}
	models.Userlog
}

func (m {{ .FeatureNameGo }}Model) IsDefault() bool {
	return m.{{ .IDField.FieldNameCamelCaseUpper }}.Len() < 1
}

func (m {{ .FeatureNameGo }}Model) CreateValidate() error {
	return validation.ValidateStruct(&m,
		{{- range .Fields }}
		validation.Field(&m.{{ .FieldNameCamelCaseUpper }}, validation.Required),
		{{- end }}
	)
}

func (m {{ .FeatureNameGo }}Model) UpdateValidate() error {
	return validation.ValidateStruct(&m,
		validation.Field(&m.{{ .IDField.FieldNameCamelCaseUpper }}, validation.Required),
	)
}

type {{ .FeatureNameGo }}ListRequestParams = models.ListRequestParams[models.ListFilter]

type {{ .FeatureNameGo }}ListResponse = models.ListResponse[{{ .FeatureNameGo }}Model]
