package {{ .PackageName }}

import (
	"database/sql"
	"errors"

	"github.com/{{ .AppNameToPackageName }}/repositories/database/sqlbuilder"
	"github.com/{{ .AppNameToPackageName }}/types"

	. "github.com/followthepattern/goqu/v9"
)

var {{ .GoTypeName }}Table = S("app").Table("{{ .FeatureTableName }}")

type {{ .GoTypeName }}Database struct {
	db *Database
}

func New{{ .GoTypeName }}Database(database *sql.DB) {{ .GoTypeName }}Database {
	db := New("postgres", database)

	return {{ .GoTypeName }}Database{
		db: db,
	}
}

func (repo {{ .GoTypeName }}Database) Create(values []{{ .GoTypeName }}Model) (err error) {
	for i, _ := range values {
		values[i].Userlog.CreatedAt = types.TimeNow()
	}

	insertion := repo.db.Insert({{ .GoTypeName }}Table)

	_, err = insertion.Rows(values).Executor().Exec()
	return
}

func (repo {{ .GoTypeName }}Database) GetByID(id string) (*{{ .GoTypeName }}Model, error) {
	value := {{ .GoTypeName }}Model{}

	query := repo.db.From({{ .GoTypeName }}Table).
		Where(Ex{
			"id": id})

	_, err := query.ScanStruct(&value)
	if err != nil {
		return nil, err
	}

	return &value, nil
}

func (repo {{ .GoTypeName }}Database) Get(request {{ .GoTypeName }}ListRequestParams) (*{{ .GoTypeName }}ListResponse, error) {
	data := []{{ .GoTypeName }}Model{}

	query := repo.db.From({{ .GoTypeName }}Table)

	// if request.Filter.Search.IsValid() {
	// pattern := fmt.Sprintf("%%%s%%", request.Filter.Search)
	// query = query.Where(
	// Or(
	// 	I("id").Like(pattern),
	// 	I("title").Like(pattern),
	// ))
	// }

	count, err := query.Count()
	if err != nil {
		return nil, err
	}

	query = sqlbuilder.WithPagination(query, request.Pagination)

	query = sqlbuilder.WithOrderBy(query, request.OrderBy)

	err = query.ScanStructs(&data)
	if err != nil {
		return nil, err
	}

	result := {{ .GoTypeName }}ListResponse{
		Count:    types.Int64From(count),
		PageSize: request.Pagination.PageSize,
		Page:     request.Pagination.Page,
		Data:     data,
	}

	return &result, nil
}

func (repo {{ .GoTypeName }}Database) Update(model {{ .GoTypeName }}Model) error {
	model.Userlog.UpdatedAt = types.TimeNow()

	_, err := repo.db.Update({{ .GoTypeName }}Table).
		Set(model).
		Where(I("id").Eq(model.ID)).
		Executor().
		Exec()

	return err
}

func (repo {{ .GoTypeName }}Database) Delete(id string) error {
	res, err := repo.db.
		Delete({{ .GoTypeName }}Table).
		Where(C("id").Eq(id)).
		Executor().
		Exec()

	if err != nil {
		return err
	}

	rows, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rows < 1 {
		return errors.New("no rows been deleted")
	}

	return err
}
