{{ $app := .App -}}
{{ $feature := . -}}

package {{ $feature | PackageName }}

import (
	"context"
	"log/slog"

	"github.com/{{ $app | PackageName }}/config"
	"github.com/{{ $app | PackageName }}/container"
	"github.com/{{ $app | PackageName }}/features/auth"
	"github.com/{{ $app | PackageName }}/features/{{ $feature | PackageName }}/models"
	"github.com/{{ $app | PackageName }}/types"

	validation "github.com/go-ozzo/ozzo-validation"
)

type {{ $feature | GoType }}Controller struct {
	{{ $feature.FeatureNameCamelCase }} {{ $feature | GoType }}Service
	logger  *slog.Logger
	cfg     config.Config
}

func New{{ $feature | GoType }}Controller(cont container.Container) {{ $feature | GoType }}Controller {
	authorizationService := auth.NewAuthorizationService(cont, "{{ $feature.FeatureNameCamelCase }}")
	{{ $feature.FeatureNameCamelCase }}Service := New{{ $feature | GoType }}Service(cont, authorizationService)

	return {{ $feature | GoType }}Controller{
		{{ $feature.FeatureNameCamelCase }}: {{ $feature.FeatureNameCamelCase }}Service,
		logger:  cont.GetLogger(),
		cfg:     cont.GetConfig(),
	}
}

func (ctrl {{ $feature | GoType }}Controller) GetByID(ctx context.Context, id string) (*models.{{ $feature | GoType }}Model, error) {
	if err := validation.Validate(id, types.Required("{{ $feature.FeatureNameCamelCase }}ID")); err != nil {
		return nil, err
	}

	result, err := ctrl.{{ $feature.FeatureNameCamelCase }}.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}

	if result.IsDefault() {
		return nil, nil
	}

	return result, nil
}

func (ctrl {{ $feature | GoType }}Controller) Get(ctx context.Context, filter models.{{ $feature | GoType }}ListRequestParams) (*models.{{ $feature | GoType }}ListResponse, error) {
	return ctrl.{{ $feature.FeatureNameCamelCase }}.Get(ctx, filter)
}

func (ctrl {{ $feature | GoType }}Controller) Create(ctx context.Context, value models.{{ $feature | GoType }}Model) error {
	if err := value.CreateValidate(); err != nil {
		return err
	}
	return ctrl.{{ $feature.FeatureNameCamelCase }}.Create(ctx, value)
}

func (ctrl {{ $feature | GoType }}Controller) Update(ctx context.Context, value models.{{ $feature | GoType }}Model) error {
	if err := value.UpdateValidate(); err != nil {
		return err
	}

	return ctrl.{{ $feature.FeatureNameCamelCase }}.Update(ctx, value)
}

func (ctrl {{ $feature | GoType }}Controller) Delete(ctx context.Context, id string) error {
	if err := validation.Validate(id, types.Required("{{ $feature.FeatureNameCamelCase }}ID")); err != nil {
		return err
	}

	return ctrl.{{ $feature.FeatureNameCamelCase }}.Delete(ctx, id)
}
