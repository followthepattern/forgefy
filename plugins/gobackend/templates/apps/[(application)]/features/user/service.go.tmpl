{{ $app := .App -}}

package user

import (
	"context"
	"log/slog"

	"github.com/{{ $app | PackageName }}/accesscontrol"
	"github.com/{{ $app | PackageName }}/features/auth"
	"github.com/{{ $app | PackageName }}/models"
	"github.com/{{ $app | PackageName }}/types"
	"github.com/{{ $app | PackageName }}/log"

	"github.com/google/uuid"
)

type UserService struct {
	authorizationService auth.AuthorizationService
	logger               *slog.Logger
	userRepository       UserDatabase
	name                 string
}

func NewUserService(
	userRepository UserDatabase,
	authorizationService auth.AuthorizationService,
	logger *slog.Logger,
) UserService {
	service := UserService{
		authorizationService: authorizationService,
		userRepository:       userRepository,
		logger:               logger.With(log.WithComponent("user service")),
		name:                 "user",
	}

	return service
}

func (service UserService) GetByID(ctx context.Context, id string) (*models.UserModel, error) {
	err := service.authorizationService.AuthorizeWithResource(ctx, service.name, id, accesscontrol.READ)
	if err != nil {
		service.logger.Error("failed to authorize user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	item, err := service.userRepository.GetByID(id)
	if err != nil {
		service.logger.Error("failed to get item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}
	return item, nil
}

func (service UserService) Get(ctx context.Context, request models.UserListRequestParams) (*models.UserListResponse, error) {
	err := service.authorizationService.AuthorizeWithResource(ctx, service.name, accesscontrol.ALLRESOURCE, accesscontrol.READ)
	if err != nil {
		service.logger.Error("failed to authorize user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	request.Pagination.SetDefaultIfEmpty()

	items, err := service.userRepository.Get(request)
	if err != nil {
		service.logger.Error("failed to get items", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}
	return items, nil
}

func (service UserService) Create(ctx context.Context, value models.UserModel) error {
	userID, err := service.authorizationService.AuthorizedUser(ctx, service.name, accesscontrol.NEW, accesscontrol.CREATE)
	if err != nil {
		service.logger.Error("failed to authorize user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}

	value.Id = types.StringFrom(uuid.NewString())
	value.Userlog.CreationUserID = types.StringFrom(userID)

	err = service.userRepository.Create([]models.UserModel{value})
	if err != nil {
		service.logger.Error("failed to create item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}
	return nil
}

func (service UserService) Update(ctx context.Context, value models.UserModel) error {
	userID, err := service.authorizationService.AuthorizedUser(ctx, service.name, value.Id.Data, accesscontrol.UPDATE)
	if err != nil {
		service.logger.Error("failed to authorize user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}

	value.UpdateUserID = types.StringFrom(userID)

	err = service.userRepository.Update(value)
	if err != nil {
		service.logger.Error("failed to update item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}
	return nil
}

func (service UserService) Delete(ctx context.Context, ids []string) error {
	err := service.authorizationService.AuthorizeWithResource(ctx, service.name, accesscontrol.ALLRESOURCE, accesscontrol.DELETE)
	if err != nil {
		service.logger.Error("failed to authorize user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}

	err = service.userRepository.Delete(ids)
	if err != nil {
		service.logger.Error("failed to delete item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}
	return nil
}
