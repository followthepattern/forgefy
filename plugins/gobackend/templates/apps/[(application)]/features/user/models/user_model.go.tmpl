{{ $app := .App -}}

package models

import (
	basemodels "github.com/{{ $app | PackageName }}/models"
	"github.com/{{ $app | PackageName }}/types"
	validation "github.com/go-ozzo/ozzo-validation"
)

type UserModel struct {
	Id        types.String `db:"id" goqu:"skipupdate,omitempty"`
	Email     types.String `db:"email" goqu:"skipupdate,omitempty"`
	FirstName types.String `db:"first_name" goqu:"omitempty"`
	LastName  types.String `db:"last_name" goqu:"omitempty"`
	Active    types.Bool   `db:"active" goqu:"skipupdate,omitempty"`
	basemodels.Userlog
}

func (model UserModel) IsDefault() bool {
	return !model.Email.IsValid() || !model.FirstName.IsValid() || !model.LastName.IsValid()
}

func (m UserModel) CreateValidate() error {
	return validation.ValidateStruct(&m,
		validation.Field(&m.Email, validation.Required),
		validation.Field(&m.FirstName, validation.Required),
		validation.Field(&m.LastName, validation.Required),
	)
}

func (m UserModel) UpdateValidate() error {
	return validation.ValidateStruct(&m,
		validation.Field(&m.Id, validation.Required),
	)
}

type UserListRequestParams = basemodels.ListRequestParams[basemodels.ListFilter]

type UserListResponse = basemodels.ListResponse[UserModel]
