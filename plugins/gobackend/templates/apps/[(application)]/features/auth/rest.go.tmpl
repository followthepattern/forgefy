{{- $app := .App -}}

package auth

import (
	"encoding/json"
	"net/http"

	"github.com/{{ $app | PackageName }}/api/httpresponses"
	"github.com/{{ $app | PackageName }}/models"
	"github.com/go-chi/chi/v5"
)

type AuthRest struct {
	auth AuthController
}

func NewAuthRest(ctrl AuthController) AuthRest {
	return AuthRest{
		auth: ctrl,
	}
}

func (rest AuthRest) ActivateUser(w http.ResponseWriter, r *http.Request) {
	userID := chi.URLParam(r, "userID")

	if err := rest.auth.ActivateUser(r.Context(), userID); err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Success(w)
}

func (rest AuthRest) Login(w http.ResponseWriter, r *http.Request) {
	var value models.LoginRequestParams
	err := json.NewDecoder(r.Body).Decode(&value)
	if err != nil {
		httpresponses.BadRequest(w, httpresponses.FailedToDecodeRequestBody)
		return
	}

	res, err := rest.auth.Login(r.Context(), value)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Write(w, http.StatusOK, res)
}

func (rest AuthRest) Register(w http.ResponseWriter, r *http.Request) {
	var value models.RegisterRequestParams
	err := json.NewDecoder(r.Body).Decode(&value)
	if err != nil {
		httpresponses.BadRequest(w, httpresponses.FailedToDecodeRequestBody)
		return
	}

	res, err := rest.auth.Register(r.Context(), value)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Write(w, http.StatusOK, res)
}
