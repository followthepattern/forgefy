{{ $app := .App -}}

package storage

import (
	"context"
	"log/slog"
	"mime/multipart"
	"os"

	"github.com/{{ $app | PackageName }}/config"
	"github.com/{{ $app | PackageName }}/log"
	"github.com/{{ $app | PackageName }}/types"

	validation "github.com/go-ozzo/ozzo-validation"
)

type StorageController struct {
	storageService StorageService
	logger         *slog.Logger
	cfg            config.Config
}

func NewStorageController(
	storageService StorageService,
	cfg config.Config,
	logger *slog.Logger,
) StorageController {
	return StorageController{
		logger:         logger.With(log.WithComponent("storage controller")),
		storageService: storageService,
		cfg:            cfg,
	}
}

func (s StorageController) UploadObject(
	ctx context.Context,
	resource string,
	file multipart.File,
	fileHeader *multipart.FileHeader,
) (string, error) {
	if err := validation.Validate(resource, types.Required("resource")); err != nil {
		s.logger.Error("failed to validate resource", log.WithError(err))
		return "", err
	}

	return s.storageService.UploadObject(
		ctx,
		resource,
		file,
		fileHeader,
	)
}

func (s StorageController) DownloadObject(
	ctx context.Context,
	resource, userID, objectID, fileName string) (*os.File, error) {

	if err := validation.Validate(resource, types.Required("resource")); err != nil {
		s.logger.Error("failed to validate resource", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	if err := validation.Validate(userID, types.Required("userID")); err != nil {
		s.logger.Error("failed to validate userID", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	if err := validation.Validate(objectID, types.Required("objectID")); err != nil {
		s.logger.Error("failed to validate objectID", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	if err := validation.Validate(fileName, types.Required("fileName")); err != nil {
		s.logger.Error("failed to validate fileName", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	return s.storageService.DownloadObject(ctx, resource, userID, objectID, fileName)
}
