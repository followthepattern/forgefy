{{ $app := .App -}}

package storage

import (
	"context"
	"fmt"
	"log/slog"
	"mime/multipart"
	"os"
	"path"

	"github.com/{{ $app | PackageName }}/accesscontrol"
	"github.com/{{ $app | PackageName }}/container"
	"github.com/{{ $app | PackageName }}/features/auth"
	"github.com/{{ $app | PackageName }}/log"
	"github.com/{{ $app | PackageName }}/models"
	
	"github.com/google/uuid"
)

type StorageServiceConfig struct {
	container.Container
	Storage              Storage
	AuthorizationService auth.AuthorizationService
}

type StorageService struct {
	logger               *slog.Logger
	authorizationService auth.AuthorizationService
	storage              Storage
}

func NewStorageService(cfg StorageServiceConfig) StorageService {
	return StorageService{
		logger:               cfg.GetLogger().With(log.WithComponent("storage service")),
		authorizationService: cfg.AuthorizationService,
		storage:              cfg.Storage,
	}
}

func (s StorageService) UploadObject(
	ctx context.Context,
	resource string,
	file multipart.File,
	fileHeader *multipart.FileHeader) (string, error) {

	objectID := uuid.NewString()

	err := s.authorizationService.AuthorizeWithResource(
		ctx,
		resource,
		objectID,
		accesscontrol.UPDATE,
	)
	if err != nil {
		s.logger.Error("failed to authorize", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return "", err
	}

	user, err := models.GetUserContext(ctx)
	if err != nil {
		s.logger.Error("failed to get user context", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return "", err
	}

	filePath := path.Join(resource, user.Id.Data, uuid.NewString())

	filePath, err = s.storage.Upload(filePath, file, *fileHeader)
	if err != nil {
		s.logger.Error("failed to upload file", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return "", err
	}

	return filePath, nil
}

func (s StorageService) DownloadObject(
	ctx context.Context,
	resource, userID, objectID, fileName string) (*os.File, error) {
	err := s.authorizationService.AuthorizeWithResource(
		ctx,
		resource,
		objectID,
		accesscontrol.READ,
	)

	if err != nil {
		s.logger.Error("failed to authorize", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	filePath := path.Join(resource, userID, objectID, fileName)
	file, err := s.storage.Download(filePath)
	if err != nil {
		s.logger.Error("failed to download file", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, fmt.Errorf("unable to return the file: %s", err.Error())
	}

	return file, nil
}
