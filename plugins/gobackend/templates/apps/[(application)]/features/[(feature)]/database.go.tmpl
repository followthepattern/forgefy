{{ $app := .App -}}
{{ $feature := . -}}
{{ $idField := $feature | IDField }}

package {{ $feature | PackageName }}

import (
	"database/sql"
	"errors"
	"fmt"

	"github.com/{{ $app | PackageName }}/features/{{ $feature | PackageName }}/models"
	"github.com/{{ $app | PackageName }}/repositories/database/sqlbuilder"
	"github.com/{{ $app | PackageName }}/types"

	. "github.com/followthepattern/goqu/v9"
)

var {{ $feature | GoType }}Table = S("app").Table("{{ $feature | DBName }}")

type {{ $feature | GoType }}Database struct {
	db *Database
}

func New{{ $feature | GoType }}Database(database *sql.DB) {{ $feature | GoType }}Database {
	db := New("postgres", database)

	return {{ $feature | GoType }}Database{
		db: db,
	}
}

func (repo {{ $feature | GoType }}Database) Create(values []models.{{ $feature | GoType }}Model) (err error) {
	for i, _ := range values {
		values[i].Userlog.CreatedAt = types.TimeNow()
	}

	insertion := repo.db.Insert({{ $feature | GoType }}Table)

	_, err = insertion.Rows(values).Executor().Exec()
	return
}

func (repo {{ $feature | GoType }}Database) GetByID(id string) (*models.{{ $feature | GoType }}Model, error) {
	value := models.{{ $feature | GoType }}Model{}

	query := repo.db.From({{ $feature | GoType }}Table).
		Where(Ex{
			"id": id})

	_, err := query.ScanStruct(&value)
	if err != nil {
		return nil, err
	}

	return &value, nil
}

func (repo {{ $feature | GoType }}Database) Get(request models.{{ $feature | GoType }}ListRequestParams) (*models.{{ $feature | GoType }}ListResponse, error) {
	data := []models.{{ $feature | GoType }}Model{}

	query := repo.db.From({{ $feature | GoType }}Table)

	if request.Filter.Search.IsValid() {
		pattern := fmt.Sprintf("%%%s%%", request.Filter.Search)
		query = query.Where(
			Or(
			{{- range $field := .Fields }}{{- if eq .Type "string" }}
				I("{{ $field | DBName }}").Like(pattern),
			{{- end }}{{- end }}
			))
	}

	count, err := query.Count()
	if err != nil {
		return nil, err
	}

	query = sqlbuilder.WithPagination(query, request.Pagination)

	query = sqlbuilder.WithOrderBy(query, request.OrderBy)

	err = query.ScanStructs(&data)
	if err != nil {
		return nil, err
	}

	result := models.{{ $feature | GoType }}ListResponse{
		Count:    types.Int64From(count),
		PageSize: request.Pagination.PageSize,
		Page:     request.Pagination.Page,
		Data:     data,
	}

	return &result, nil
}

func (repo {{ $feature | GoType }}Database) Update(model models.{{ $feature | GoType }}Model) error {
	model.Userlog.UpdatedAt = types.TimeNow()

	_, err := repo.db.Update({{ $feature | GoType }}Table).
		Set(model).
		Where(I("id").Eq(model.{{ $idField.FieldNameCamelCaseUpper }})).
		Executor().
		Exec()

	return err
}

func (repo {{ $feature | GoType }}Database) Delete(id []string) error {
	res, err := repo.db.
		Delete({{ $feature | GoType }}Table).
		Where(C("{{ $idField | DBName }}").Eq(id)).
		Executor().
		Exec()

	if err != nil {
		return err
	}

	rows, err := res.RowsAffected()
	if err != nil {
		return err
	}

	if rows < 1 {
		return errors.New("no rows been deleted")
	}

	return err
}
