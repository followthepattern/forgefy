{{ $app := .App -}}
{{ $feature := . -}}
{{ $idField := $feature | IDField -}}

package {{ $feature | PackageName }}

import (
	"context"
	"log/slog"

	"github.com/{{ $app | PackageName }}/accesscontrol"
	"github.com/{{ $app | PackageName }}/container"
	"github.com/{{ $app | PackageName }}/features/auth"
	"github.com/{{ $app | PackageName }}/models"
	"github.com/{{ $app | PackageName }}/log"
	"github.com/{{ $app | PackageName }}/types"
	"github.com/google/uuid"
)

type {{ $feature | GoType }}Service struct {
	authorizationService auth.AuthorizationService
	logger               *slog.Logger
	{{ $feature.FeatureName | LowerCamelCase }}Repository	{{ $feature | GoType }}Database
}

func New{{ $feature | GoType }}Service(cont container.Container, authorizationService auth.AuthorizationService) {{ $feature | GoType }}Service {
	repository := New{{ $feature | GoType }}Database(cont.GetDB())
	service := {{ $feature | GoType }}Service{
		authorizationService: authorizationService,
		{{ $feature.FeatureName | LowerCamelCase }}Repository:    repository,
		logger:	cont.GetLogger().With(log.WithComponent("{{ $feature.FeatureName | LowerCamelCase }} service")),
	}

	return service
}

func (service {{ $feature | GoType }}Service) GetByID(ctx context.Context, id string) (*models.{{ $feature | GoType }}Model, error) {
	err := service.authorizationService.Authorize(ctx, accesscontrol.READ, id)
	if err != nil {
		service.logger.Error("Error authorizing user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	item, err := service.{{ $feature.FeatureName | LowerCamelCase }}Repository.GetByID(id)
	if err != nil {
		service.logger.Error("failed to get item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}
	return item, nil
}

func (service {{ $feature | GoType }}Service) Get(ctx context.Context, request models.{{ $feature | GoType }}ListRequestParams) (*models.{{ $feature | GoType }}ListResponse, error) {
	err := service.authorizationService.Authorize(ctx, accesscontrol.READ, accesscontrol.ALLRESOURCE)
	if err != nil {
		service.logger.Error("Error authorizing user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}

	request.Pagination.SetDefaultIfEmpty()

	items, err := service.{{ $feature.FeatureName | LowerCamelCase }}Repository.Get(request)
	if err != nil {
		service.logger.Error("failed to get items", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return nil, err
	}
	return items, nil
}

func (service {{ $feature | GoType }}Service) Create(ctx context.Context, value models.{{ $feature | GoType }}Model) error {
	userID, err := service.authorizationService.AuthorizedUser(ctx, accesscontrol.CREATE, accesscontrol.NEW)
	if err != nil {
		service.logger.Error("Error authorizing user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}

	value.{{ $idField.FieldNameCamelCaseUpper }} = types.StringFrom(uuid.NewString())
	value.Userlog.CreationUserID = types.StringFrom(userID)

	err = service.{{ $feature.FeatureName | LowerCamelCase }}Repository.Create([]models.{{ $feature | GoType }}Model{value})
	if err != nil {
		service.logger.Error("failed to create item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}
	return nil
}

func (service {{ $feature | GoType }}Service) Update(ctx context.Context, value models.{{ $feature | GoType }}Model) error {
	userID, err := service.authorizationService.AuthorizedUser(ctx, accesscontrol.UPDATE, value.{{ $idField.FieldNameCamelCaseUpper }}.Data)
	if err != nil {
		service.logger.Error("Error authorizing user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}

	value.UpdateUserID = types.StringFrom(userID)

	err = service.{{ $feature.FeatureName | LowerCamelCase }}Repository.Update(value)
	if err != nil {
		service.logger.Error("failed to update item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}
	return nil
}

func (service {{ $feature | GoType }}Service) Delete(ctx context.Context, ids []string) error {
	err := service.authorizationService.Authorize(ctx, accesscontrol.DELETE, accesscontrol.ALLRESOURCE)
	if err != nil {
		service.logger.Error("Error authorizing user", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}

	err = service.{{ $feature.FeatureName | LowerCamelCase }}Repository.Delete(ids)
	if err != nil {
		service.logger.Error("failed to delete item", log.WithError(err), log.WithCorrelationID(ctx), log.WithUserContext(ctx))
		return err
	}
	return nil
}
