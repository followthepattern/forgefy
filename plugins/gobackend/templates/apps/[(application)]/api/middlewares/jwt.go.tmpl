{{ $app := .App -}}

package middlewares

import (
	"context"
	"errors"
	"fmt"
	"log/slog"
	"net/http"
	"strings"
	"time"

	"github.com/{{ $app | PackageName }}/api/httpresponses"
	"github.com/{{ $app | PackageName }}/config"
	"github.com/{{ $app | PackageName }}/log"
	"github.com/{{ $app | PackageName }}/models"
	"github.com/{{ $app | PackageName }}/types"
	"github.com/golang-jwt/jwt/v4"
)

const (
	AuthorizationHeader = "Authorization"
	BearerPrefix        = "Bearer"
	InvalidToken        = "invalid user token"
	ExpiredToken        = "ExpiredToken"
)

var tokenError = errors.New(InvalidToken)

type JWT struct {
	logger  *slog.Logger
	jwtKeys config.JwtKeyPair
}

func NewJWT(logger *slog.Logger, jwtKeys config.JwtKeyPair) JWT {
	result := JWT{
		logger:  logger.With(log.WithComponent("jwt middleware")),
		jwtKeys: jwtKeys,
	}
	return result
}

func (j JWT) Authenticate(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		headerValue := r.Header.Get(AuthorizationHeader)

		userContext, err := j.getContextUserFromTokenString(headerValue)
		if err != nil {
			httpresponses.BadRequest(w, err.Error())
			j.logger.Error("failed to get user context from token", log.WithError(err), log.WithCorrelationID(r.Context()))
			return
		}

		ctx := context.WithValue(r.Context(), models.UserContextKey, userContext)
		r = r.WithContext(ctx)
		next.ServeHTTP(w, r)
	})
}

func (j JWT) keyFunc(token *jwt.Token) (any, error) {
	if _, ok := token.Method.(*jwt.SigningMethodEd25519); !ok {
		return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
	}
	return j.jwtKeys.Public, nil
}

func (j JWT) getContextUserFromTokenString(headerString string) (models.UserContext, error) {
	tokenString := removeBearerPrefix(headerString)
	if len(tokenString) == 0 {
		return models.UserContext{}, tokenError
	}

	token, err := jwt.Parse(tokenString, j.keyFunc)
	if err != nil {
		return models.UserContext{}, fmt.Errorf("invalid token %s", err.Error())
	}

	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok || !token.Valid {
		return models.UserContext{}, tokenError
	}

	user, err := getAuthorizedUserFromClaims(claims)
	if err != nil {
		return models.UserContext{}, tokenError
	}
	return user, nil
}

func invalidTokenError(field string) error {
	return fmt.Errorf("%s - missing field: %s", InvalidToken, field)
}

func getAuthorizedUserFromClaims(claims jwt.MapClaims) (models.UserContext, error) {
	id, ok := claims["id"].(string)
	if !ok {
		return models.UserContext{}, invalidTokenError("id")
	}
	email, ok := claims["email"].(string)
	if !ok {
		return models.UserContext{}, invalidTokenError("email")
	}
	firstName, ok := claims["firstName"].(string)
	if !ok {
		return models.UserContext{}, invalidTokenError("firstName")
	}
	lastName, ok := claims["lastName"].(string)
	if !ok {
		return models.UserContext{}, invalidTokenError("lastName")
	}
	expiresAtStr, ok := claims["expiresAt"].(string)
	if !ok {
		return models.UserContext{}, invalidTokenError("expiresAt")
	}
	expiresAt, err := time.Parse(time.RFC3339, expiresAtStr)
	if err != nil {
		return models.UserContext{}, err
	}

	if time.Now().After(expiresAt) {
		return models.UserContext{}, errors.New(ExpiredToken)
	}

	return models.UserContext{
		Id:        types.StringFrom(id),
		Email:     types.StringFrom(email),
		FirstName: types.StringFrom(firstName),
		LastName:  types.StringFrom(lastName),
	}, nil
}

func removeBearerPrefix(tokenString string) string {
	tokens := strings.Split(tokenString, BearerPrefix)

	if len(tokens) < 2 {
		return ""
	}

	return strings.TrimSpace(tokens[1])
}
