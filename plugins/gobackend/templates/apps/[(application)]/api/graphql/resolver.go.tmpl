{{ $app := .App -}}

package graphql

import (
	"github.com/{{ $app | PackageName }}/features/auth"
	"github.com/{{ $app | PackageName }}/features/user"
	{{ $AppNameToPackageName := $app | PackageName }}
{{- range $feature := .Features }}
	"github.com/{{ $AppNameToPackageName }}/features/{{ $feature | PackageName }}"
{{- end }}
)

type Resolver struct {
	authGraphQL	auth.AuthGraphQL
	userGraphQL user.UserGraphQL

{{- range $feature := .Features }}
	{{ $feature.FeatureName | LowerCamelCase }}GraphQL	{{ $feature | PackageName }}.{{ $feature | GoType }}GraphQL
{{- end }}
}

func NewResolver(
	authGraphQL	auth.AuthGraphQL,
	userGraphQL user.UserGraphQL,

{{- range $feature := .Features }}
	{{ .FeatureNameCamelCase }}GraphQL	{{ $feature | PackageName }}.{{ $feature | GoType }}GraphQL,
{{- end }}
) Resolver {
	resolver := Resolver{
		authGraphQL:	authGraphQL,
		userGraphQL:    userGraphQL,
{{- range .Features }}
		{{ .FeatureNameCamelCase }}GraphQL: {{ .FeatureNameCamelCase }}GraphQL,
{{- end }}
	}

	return resolver
}

func (r Resolver) Authentication() (auth.AuthGraphQL, error) {
	return r.authGraphQL, nil
}

func (r Resolver) Auth() (auth.AuthGraphQL, error) {
	return r.authGraphQL, nil
}
func (r Resolver) Users() (user.UserGraphQL, error) {
	return r.userGraphQL, nil
}

{{- range $feature := .Features }}
func (r Resolver) {{ $feature | GoType }}s() ({{ $feature | PackageName }}.{{ $feature | GoType }}GraphQL, error) {
	return r.{{ $feature.FeatureNameCamelCase }}GraphQL, nil
}
{{- end }}