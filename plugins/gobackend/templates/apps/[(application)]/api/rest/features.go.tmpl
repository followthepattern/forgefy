{{ $app := .App -}}
{{ $features := .Features -}}

package rest

import (
	"net/http"

	"github.com/{{ $app | PackageName }}/features/storage"
{{- $AppNameToPackageName := $app | PackageName }}
{{- range $feature := $features }}
	"github.com/{{ $AppNameToPackageName }}/features/{{ $feature | PackageName }}"
{{- end }}
	"github.com/go-chi/chi/v5"
)

type FeatureHandler interface {
	http.Handler
}

func New(
	storageController storage.StorageController,
{{- range $feature := $features }}
	{{ $feature.FeatureName | LowerCamelCase }}Controller {{ $feature | PackageName }}.{{ $feature.FeatureName | UpperCamelCase }}Controller,
{{- end }}
) FeatureHandler {
	r := chi.NewMux()

	storage := storage.NewStorageRest(storageController)
	r.Route("/storage", storage)

	{{ range $feature := $features -}}
	{{ $feature.FeatureName | LowerCamelCase }} := {{ $feature | PackageName }}.New{{ $feature | GoType }}Rest({{ $feature.FeatureName | LowerCamelCase }}Controller)
	r.Route("/{{ $feature | AsURL }}s", func(r chi.Router) {
		r.Get("/", {{ $feature.FeatureName | LowerCamelCase }}.Get)
		r.Get("/id", {{ $feature.FeatureName | LowerCamelCase }}.GetByID)
		r.Post("/", {{ $feature.FeatureName | LowerCamelCase }}.Create)
		r.Post("/id", {{ $feature.FeatureName | LowerCamelCase }}.Update)
	})
	{{ end }}
	return r
}
