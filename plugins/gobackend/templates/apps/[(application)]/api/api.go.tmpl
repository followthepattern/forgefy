{{ $app := .App -}}

package api

import (
	"net/http"

	"log/slog"

	"github.com/{{ $app | PackageName }}/api/graphql"
	"github.com/{{ $app | PackageName }}/api/middlewares"
	"github.com/{{ $app | PackageName }}/api/rest"
	"github.com/{{ $app | PackageName }}/config"
	"github.com/{{ $app | PackageName }}/controllers"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
)

func NewHttpApi(cfg config.Config,
	jwtKeys config.JwtKeyPair,
	ctrls controllers.Controllers,
	logger *slog.Logger,
) *chi.Mux {
	r := chi.NewRouter()

	graphqlHandler := graphql.NewHandler(ctrls)
	restHandler := rest.New(ctrls)
	authHandler := rest.NewAuth(ctrls)

	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	}))

	middlewareLogger := middlewares.NewMiddlewareLogger(logger)
	authMiddleware := middlewares.NewJWT(logger, jwtKeys)

	r.Use(middlewares.CorrelationID)
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middlewares.Heartbeat("/healthcheck", cfg.Server.Version))
	r.Use(middlewareLogger)

	r.Route("/", func(r chi.Router) {
		r.With(authMiddleware.Authenticate).Post("/graphql", graphqlHandler.ServeHTTP)
		r.With(authMiddleware.Authenticate).Mount("/", restHandler)
	})

	r.Mount("/auth", authHandler)

	return r
}