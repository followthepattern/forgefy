{{ $app := .App -}}

package api

import (
	"net/http"
	"os"
	"path/filepath"

	"github.com/{{ $app | PackageName }}/api/graphql"
	"github.com/{{ $app | PackageName }}/api/middlewares"
	"github.com/{{ $app | PackageName }}/api/rest"
	"github.com/{{ $app | PackageName }}/container"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
)

func NewHttpApi(c *container.Container) (*chi.Mux, error) {
	r := chi.NewRouter()
	cfg := c.GetConfig()

	graphqlHandler, err := container.Resolve[graphql.GraphQLHandler](c)
	if err != nil {
		return nil, err
	}

	featureHandler, err := container.Resolve[rest.FeatureHandler](c)
	if err != nil {
		return nil, err
	}

	authHandler, err := container.Resolve[rest.AuthHandler](c)
	if err != nil {
		return nil, err
	}

	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"*"},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: false,
		MaxAge:           300,
	}))

	middlewareLogger := middlewares.NewMiddlewareLogger(c.GetLogger("api_logger"))
	authMiddleware := middlewares.NewJWT(c.GetLogger("jwt_logger"), cfg.Server.JwtKeyPair)

	r.Use(middlewares.CorrelationID)
	r.Use(middleware.RealIP)
	r.Use(middleware.Recoverer)
	r.Use(middlewares.Heartbeat("/healthcheck", cfg.Server.Version))
	r.Use(middlewareLogger)

	r.Route("/", func(r chi.Router) {
		if cfg.SPA.IsSPA() {
			r.Handle("/*", spaHandler(cfg.SPA.StaticDir, cfg.SPA.IndexFile))
		}

		r.With(authMiddleware.Authenticate).Post("/graphql", graphqlHandler.ServeHTTP)
		r.With(authMiddleware.Authenticate).Mount("/api", featureHandler)
	})

	r.Mount("/auth", authHandler)

	return r, nil
}

func spaHandler(staticPath, indexFile string) http.HandlerFunc {
	fs := http.FileServer(http.Dir(staticPath))

	return func(w http.ResponseWriter, r *http.Request) {
		requestedPath := filepath.Join(staticPath, r.URL.Path)

		info, err := os.Stat(requestedPath)
		if err == nil && !info.IsDir() {
			fs.ServeHTTP(w, r)
			return
		}

		http.ServeFile(w, r, filepath.Join(staticPath, indexFile))
	}
}
