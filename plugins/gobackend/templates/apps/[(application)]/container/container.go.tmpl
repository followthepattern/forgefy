{{ $app := .App -}}

package container

import (
	"database/sql"
	"log/slog"

	"github.com/{{ $app | PackageName }}/accesscontrol"
	"github.com/{{ $app | PackageName }}/config"
	"github.com/{{ $app | PackageName }}/features/mail"
	"github.com/{{ $app | PackageName }}/log"
)

type ContainerOption interface {
	Apply(c *Container)
}

type ContainerOptionFn func(c *Container)

func (f ContainerOptionFn) Apply(c *Container) {
	f(c)
}

func WithLogger(logger *slog.Logger) ContainerOption {
	return ContainerOptionFn(func(c *Container) {
		c.logger = logger
	})
}

type Container struct {
	ac      accesscontrol.AccessControl
	email   mail.Email
	db      *sql.DB
	cfg     config.Config
	jwtKeys config.JwtKeyPair
	logger  *slog.Logger
}

func New(ac accesscontrol.AccessControl, emailClient mail.Email, db *sql.DB, cfg config.Config, jwtKeys config.JwtKeyPair, opts ...ContainerOption) Container {
	c := Container{
		ac:      ac,
		db:      db,
		cfg:     cfg,
		logger:  log.DefaultLogger,
		email:   emailClient,
		jwtKeys: jwtKeys,
	}

	for _, opt := range opts {
		opt.Apply(&c)
	}

	return c
}

func (c Container) GetAccessControl() accesscontrol.AccessControl {
	return c.ac
}

func (c Container) GetDB() *sql.DB {
	return c.db
}

func (c Container) GetConfig() config.Config {
	return c.cfg
}

func (c Container) GetLogger() *slog.Logger {
	return c.logger
}

func (c Container) GetEmail() mail.Email {
	return c.email
}

func (c Container) GetJWTKeys() config.JwtKeyPair {
	return c.jwtKeys
}
