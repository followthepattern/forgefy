{{ $app := .App -}}

package main

import (
	"context"
	"database/sql"
	"fmt"
	"os"
	"os/signal"

	"log/slog"

	"github.com/{{ $app | PackageName }}/accesscontrol"
	"github.com/{{ $app | PackageName }}/api"
	"github.com/{{ $app | PackageName }}/config"
	"github.com/{{ $app | PackageName }}/container"
	"github.com/{{ $app | PackageName }}/controllers"
	"github.com/{{ $app | PackageName }}/features/mail"
	"github.com/{{ $app | PackageName }}/hostserver"
	"github.com/{{ $app | PackageName }}/log"

	_ "github.com/lib/pq"
)

func main() {
	cfg, err := config.Parse()
	if err != nil {
		log.DefaultLogger.Error("failed to parse config", log.WithError(err))
		os.Exit(1)
	}

	logger := log.New(cfg)
	logger.Info("using following config",
		slog.String("version", cfg.Server.Version),
		slog.String("host", cfg.Server.Host),
		slog.String("port", cfg.Server.Port),
		slog.Bool("spa enabled", cfg.SPA.IsSPA()),
		slog.String("log level", slog.Level(cfg.Server.LogLevel).String()),
		slog.String("db", cfg.DB.Host),
		slog.Int("db port", cfg.DB.Port),
		slog.String("mail", cfg.Mail.Host),
		slog.String("organization", cfg.Organization.Name),
		slog.String("organization email", cfg.Organization.Email),
		slog.String("cerbos address", cfg.Cerbos.Address),
	)

	jwt, err := config.GetKeys(logger, cfg.Server)
	if err != nil {
		logger.Error("failed to get keys", log.WithError(err))
		os.Exit(1)
	}

	db, err := createDBConn(cfg)
	if err != nil {
		logger.Error("failed to create db connection", log.WithError(err))
		os.Exit(1)
	}

	defer func() {
		if err := db.Close(); err != nil {
			logger.Error("failed to close db connection", log.WithError(err))
		}
	}()

	ctx := context.Background()

	cerbosClient, err := accesscontrol.New(cfg.Cerbos)
	if err != nil {
		logger.Error("failed to create cerbos client", log.WithError(err))
		os.Exit(1)
	}

	mail := mail.NewMail(cfg, mail.NewClient(), logger.With(log.WithComponent("mail")))

	cont := container.New(
		cerbosClient,
		db,
		cfg,
		jwt,
		container.WithLogger(logger),
		container.WithEMail(mail),
	)

	ctrls := controllers.New(cont)

	router := api.NewHttpApi(cfg, jwt, ctrls, logger.With(log.WithComponent("api")))

	server := hostserver.NewServer(router, logger)
	ctx, cancel := context.WithCancel(ctx)

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		osCall := <-c
		logger.Info("received os call", slog.String("os call", osCall.String()))
		cancel()
	}()

	if err := server.Serve(ctx, cfg.Server.Host, cfg.Server.Port); err != nil {
		logger.Error("failed to serve server", log.WithError(err))
	}
}

func createDBConn(cfg config.Config) (*sql.DB, error) {
	db, err := sql.Open("postgres", cfg.DB.ConnectionURL())
	if err != nil {
		return nil, fmt.Errorf("failed to open db connection: %w", err)
	}

	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("failed to ping db: %w", err)
	}

	return db, err
}
