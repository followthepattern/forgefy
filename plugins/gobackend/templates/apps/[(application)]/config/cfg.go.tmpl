{{ $app := .App -}}

package config

import (
	"fmt"
	"strings"

	validation "github.com/go-ozzo/ozzo-validation"
	"github.com/spf13/viper"
)

type Config struct {
	Server       Server
	DB           DB
	Mail         Mail
	Organization Organization
	Cerbos       Cerbos
	SPA          SPA
}

func Parse() (result Config, err error) {
	viper.SetConfigName("config")
	viper.AddConfigPath("configs")
	viper.SetEnvPrefix("{{ $app.AppName | EnvVariable }}")
	viper.AutomaticEnv()
	viper.AllowEmptyEnv(true)
	viper.SetEnvKeyReplacer(strings.NewReplacer(".", "_"))
	viper.SetConfigType("yml")

	if err = viper.ReadInConfig(); err != nil {
		return Config{}, fmt.Errorf("error reading config file, %s", err)
	}

	err = viper.Unmarshal(&result)
	if err != nil {
		return Config{}, fmt.Errorf("unable to decode into worker, %v", err)
	}

	err = result.Validate()
	if err != nil {
		return Config{}, fmt.Errorf("invalid configuration provided %v", err)
	}

	return
}

func (cfg Config) Validate() error {
	fields := []*validation.FieldRules{
		validation.Field(&cfg.Server, validation.Required),
		validation.Field(&cfg.DB, validation.Required),
		validation.Field(&cfg.Mail, validation.Required),
		validation.Field(&cfg.Organization, validation.Required),
	}

	if cfg.SPA.IsSPA() {
		fields = append(fields,
			validation.Field(&cfg.SPA, validation.Required),
		)
	}

	return validation.ValidateStruct(&cfg, fields...)
}
