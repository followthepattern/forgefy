{{ $app := .App -}}

package accesscontrol

import (
	"context"
	"errors"

	"github.com/{{ $app | PackageName }}/config"
	"github.com/cerbos/cerbos-sdk-go/cerbos"
)

const (
	CREATE = "create"
	READ   = "read"
	UPDATE = "update"
	DELETE = "delete"

	ALLRESOURCE = "ALL"
	NEW         = "NEW"
)

type AccessControl struct {
	cerbos cerbos.Client[*cerbos.GRPCClient, cerbos.PrincipalCtx]
}

func New(cfg config.Config) (AccessControl, error) {
	client, err := cerbos.New(cfg.Cerbos.Address, cerbos.WithPlaintext())
	if err != nil {
		return AccessControl{}, err
	}

	return AccessControl{
		cerbos: client,
	}, nil
}

func (ac AccessControl) AuthorizeWithResource(ctx context.Context, resource string, principalID string, action string, resourceID string, roles ...string) error {
	principal := cerbos.NewPrincipal(principalID, roles...)

	cerbosResource := cerbos.NewResource(resource, resourceID)

	ok, err := ac.cerbos.IsAllowed(ctx, principal, cerbosResource, action)
	if err != nil {
		return err
	}

	if !ok {
		return errors.New("action is not allowed")
	}

	return nil
}
