{{ $app := .App -}}

package storage

import (
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path/filepath"

	"github.com/{{ $app | PackageName }}/api/httpresponses"
	"github.com/go-chi/chi/v5"
)

const (
	MAX_MEMORY = 64 << 20
)

type StorageRest struct {
	storageController StorageController
}

func NewStorageRest(ctrl StorageController) func(r chi.Router) {
	server := StorageRest{
		storageController: ctrl,
	}

	return func(r chi.Router) {
		r.Post("/upload/{resource}", server.ServeUpload)
		r.Get("/download/{resource}/{userID}/{objectID}/{filename}", server.ServeDownload)
	}
}

func (server StorageRest) ServeUpload(w http.ResponseWriter, r *http.Request) {
	resource := chi.URLParam(r, "resource")

	if err := r.ParseMultipartForm(MAX_MEMORY); err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	file, fileHeader, err := r.FormFile("file")
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	defer file.Close()

	filePath, err := server.storageController.UploadObject(
		r.Context(),
		resource,
		file,
		fileHeader)

	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Write(w, http.StatusOK, filePath)
}

func (server StorageRest) ServeDownload(w http.ResponseWriter, r *http.Request) {
	resource := chi.URLParam(r, "resource")
	userID := chi.URLParam(r, "userID")
	objectID := chi.URLParam(r, "objectID")
	fileName := chi.URLParam(r, "filename")

	decodedFileName, err := url.QueryUnescape(fileName)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	file, err := server.storageController.DownloadObject(
		r.Context(),
		resource,
		userID,
		objectID,
		decodedFileName,
	)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	defer file.Close()

	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", filepath.Base(fileName)))
	w.Header().Set("Content-Type", r.Header.Get("Content-Type"))

	_, err = io.Copy(w, file)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}
}