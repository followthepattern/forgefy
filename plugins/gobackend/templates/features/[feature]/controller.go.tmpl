package {{ .FeatureNamePackage }}

import (
	"context"
	"log/slog"

	"github.com/{{ .AppNamePackage }}/config"
	"github.com/{{ .AppNamePackage }}/container"
	"github.com/{{ .AppNamePackage }}/features/auth"
	"github.com/{{ .AppNamePackage }}/features/{{ .FeatureNamePackage }}/models"
	"github.com/{{ .AppNamePackage }}/types"

	validation "github.com/go-ozzo/ozzo-validation"
)

type {{ .FeatureNameGo }}Controller struct {
	{{ .FeatureNameCamelCase }} {{ .FeatureNameGo }}Service
	logger  *slog.Logger
	cfg     config.Config
}

func New{{ .FeatureNameGo }}Controller(cont container.Container) {{ .FeatureNameGo }}Controller {
	authorizationService := auth.NewAuthorizationService(cont, "{{ .FeatureNameCamelCase }}")
	{{ .FeatureNameCamelCase }}Service := New{{ .FeatureNameGo }}Service(cont, authorizationService)

	return {{ .FeatureNameGo }}Controller{
		{{ .FeatureNameCamelCase }}: {{ .FeatureNameCamelCase }}Service,
		logger:  cont.GetLogger(),
		cfg:     cont.GetConfig(),
	}
}

func (ctrl {{ .FeatureNameGo }}Controller) GetByID(ctx context.Context, id string) (*models.{{ .FeatureNameGo }}Model, error) {
	if err := validation.Validate(id, types.Required("{{ .FeatureNameCamelCase }}ID")); err != nil {
		return nil, err
	}

	result, err := ctrl.{{ .FeatureNameCamelCase }}.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}

	if result.IsDefault() {
		return nil, nil
	}

	return result, nil
}

func (ctrl {{ .FeatureNameGo }}Controller) Get(ctx context.Context, filter models.{{ .FeatureNameGo }}ListRequestParams) (*models.{{ .FeatureNameGo }}ListResponse, error) {
	return ctrl.{{ .FeatureNameCamelCase }}.Get(ctx, filter)
}

func (ctrl {{ .FeatureNameGo }}Controller) Create(ctx context.Context, value models.{{ .FeatureNameGo }}Model) error {
	if err := value.CreateValidate(); err != nil {
		return err
	}
	return ctrl.{{ .FeatureNameCamelCase }}.Create(ctx, value)
}

func (ctrl {{ .FeatureNameGo }}Controller) Update(ctx context.Context, value models.{{ .FeatureNameGo }}Model) error {
	if err := value.UpdateValidate(); err != nil {
		return err
	}

	return ctrl.{{ .FeatureNameCamelCase }}.Update(ctx, value)
}

func (ctrl {{ .FeatureNameGo }}Controller) Delete(ctx context.Context, id string) error {
	if err := validation.Validate(id, types.Required("{{ .FeatureNameCamelCase }}ID")); err != nil {
		return err
	}

	return ctrl.{{ .FeatureNameCamelCase }}.Delete(ctx, id)
}
