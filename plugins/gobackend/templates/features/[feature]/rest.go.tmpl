{{ $app := . -}}
{{ $feature := . -}}
{{ $idField := $feature | IDField -}}

package {{ $feature | PackageName }}

import (
	"encoding/json"
	"net/http"

	"github.com/{{ $app | PackageName }}/api/httpresponses"
	"github.com/{{ $app | PackageName }}/features/{{ $feature | PackageName }}/models"
	basemodels "github.com/{{ $app | PackageName }}/models"
	"github.com/{{ $app | PackageName }}/types"

	"github.com/go-chi/chi/v5"
)

type {{ $feature | GoType }}Rest struct {
	{{ .FeatureNameCamelCase }} {{ $feature | GoType }}Controller
}

func New{{ $feature | GoType }}Rest(ctrl {{ $feature | GoType }}Controller) {{ $feature | GoType }}Rest {
	return {{ $feature | GoType }}Rest{
		{{ .FeatureNameCamelCase }}: ctrl,
	}
}

func (service {{ $feature | GoType }}Rest) GetByID(w http.ResponseWriter, r *http.Request) {
	id := chi.URLParam(r, "id")

	result, err := service.{{ .FeatureNameCamelCase }}.GetByID(r.Context(), id)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Write(w, http.StatusOK, result)
}

func (service {{ $feature | GoType }}Rest) Get(w http.ResponseWriter, r *http.Request) {
	search := chi.URLParam(r, "search")

	filter := models.{{ $feature | GoType }}ListRequestParams{
		Filter: basemodels.ListFilter{
			Search: types.StringFrom(search),
		},
	}

	results, err := service.{{ .FeatureNameCamelCase }}.Get(r.Context(), filter)

	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Write(w, http.StatusOK, results)
}

func (service {{ $feature | GoType }}Rest) Create(w http.ResponseWriter, r *http.Request) {
	var value models.{{ $feature | GoType }}Model
	err := json.NewDecoder(r.Body).Decode(&value)
	if err != nil {
		httpresponses.BadRequest(w, httpresponses.FailedToDecodeRequestBody)
		return
	}

	err = service.{{ .FeatureNameCamelCase }}.Create(r.Context(), value)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Created(w)
}

func (service {{ $feature | GoType }}Rest) Update(w http.ResponseWriter, r *http.Request) {
	var value models.{{ $feature | GoType }}Model
	err := json.NewDecoder(r.Body).Decode(&value)
	if err != nil {
		httpresponses.BadRequest(w, httpresponses.FailedToDecodeRequestBody)
		return
	}

	id := r.URL.Query().Get("id")
	value.{{ $idField.FieldNameCamelCaseUpper }} = types.StringFrom(id)

	err = service.{{ .FeatureNameCamelCase }}.Update(r.Context(), value)
	if err != nil {
		httpresponses.BadRequest(w, err.Error())
		return
	}

	httpresponses.Success(w)
}