scalar Time
scalar Int64
scalar Uint

type ResponseStatus {
	code: Int!
}

input Pagination {
	pageSize: Uint
	page: Uint
}

input OrderBy {
	name: String!
	desc: Boolean
}

input ListFilter {
	search: String
}

type LoginResponse {
	jwt: String!
	expires_at: Time!
}

type RegisterResponse {
	email: String!
	first_name: String!
	last_name: String!
}

type AuthUser {
	id: String!
	email: String!
	firstName: String!
	lastName: String!
	active: Boolean!
	creationUserID: String!
	updateUserID: String!
	createdAt: Time!
	updatedAt: Time!
}

type AuthQuery {
	profile: AuthUser
}

type AuthMutation {
	login(email: String!, password: String!): LoginResponse
	register(email: String!, firstName: String!, lastName: String!, password: String!): RegisterResponse
}

type User {
	id: String!
	email: String!
	firstName: String!
	lastName: String!
	creationUserID: String!
	updateUserID: String!
	createdAt: Time!
	updatedAt: Time!
}

input CreateUser {
	id: String!
	email: String!
	firstName: String!
	lastName: String!
}

input UpdateUser {
	id: String!
	email: String!
	firstName: String!
	lastName: String!
}

type UserListResponse {
	count: Int64!
	pageSize: Uint!
	page: Uint!
	data: [User!]!
}

type UserQuery {
	single(id: String!): User
	list(pagination: Pagination, filter: ListFilter, orderBy: [OrderBy!]): UserListResponse
}

type UserMutation {
	create(model: CreateUser!): ResponseStatus
	update(id: String!, model: UpdateUser!): ResponseStatus
	delete(id: String!): ResponseStatus
}

{{- range .Features }}

type {{ .FeatureNameGraphQL }} {
	{{- range $field := .Fields }}
	{{ $field | NameGraphQL }}: {{ $field | TypeGraphQL }}!
	{{- end }}
	creationUserID: String!
	updateUserID: String!
	createdAt: Time!
	updatedAt: Time!
}

input Create{{ .FeatureNameGraphQL }} {
	{{- range $field := .Fields }}
	{{ $field | NameGraphQL }}: {{ $field | TypeGraphQL }}!
	{{- end }}
}

input Update{{ .FeatureNameGraphQL }} {
	{{- range $field := .Fields }}
	{{ $field | NameGraphQL }}: {{ $field | TypeGraphQL }}!
	{{- end }}
}

type {{ .FeatureNameGraphQL }}ListResponse {
	count: Int64!
	pageSize: Uint!
	page: Uint!
	data: [{{ .FeatureNameGraphQL }}!]!
}

type {{ .FeatureNameGraphQL }}Query {
	single(id: String!): {{ .FeatureNameGraphQL }}
	list(pagination: Pagination, filter: ListFilter, orderBy: [OrderBy!]): {{ .FeatureNameGraphQL }}ListResponse
}

type {{ .FeatureNameGraphQL }}Mutation {
	create(model: Create{{ .FeatureNameGraphQL }}!): ResponseStatus
	update(id: String!, model: Update{{ .FeatureNameGraphQL }}!): ResponseStatus
	delete(id: String!): ResponseStatus
}

{{- end }}

schema {
	query: Query
	mutation: Mutation
}

type Query {
	auth: AuthQuery!
	users: UserQuery!
{{- range .Features }}
	{{ .FeatureNameCamelCase }}s: {{ .FeatureNameGraphQL }}Query!
{{- end }}
}

type Mutation {
	authentication: AuthMutation!
	users: UserMutation!
{{- range .Features }}
	{{ .FeatureNameCamelCase }}s: {{ .FeatureNameGraphQL }}Mutation!
{{- end }}
}
