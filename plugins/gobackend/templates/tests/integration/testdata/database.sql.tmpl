{{ $appName := .AppNameCamelCase }}

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

COMMENT ON SCHEMA public IS 'standard public schema';

CREATE SCHEMA auth;

ALTER SCHEMA auth OWNER TO {{ $appName }}user;

CREATE TABLE auth.user (
    id varchar NOT NULL,
    email varchar NOT NULL,
    first_name varchar NOT NULL,
    last_name varchar NOT NULL,
    password_hash varchar,
    active boolean DEFAULT false NOT NULL,
    creation_user_id varchar,
    update_user_id varchar,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp
);

ALTER SCHEMA auth OWNER TO {{ $appName }}user;

CREATE TABLE auth.role (
    id character varying,
    code character varying,
    name character varying,
    creation_user_id character varying,
    update_user_id character varying,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp
);

ALTER TABLE auth.role OWNER TO {{ $appName }}user;

CREATE TABLE auth.user_role (
    user_id character varying,
    role_id character varying,
    creation_user_id character varying,
    update_user_id character varying,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp
);

ALTER TABLE auth.user_role OWNER TO {{ $appName }}user;

SET default_tablespace = '';

SET default_table_access_method = heap;

CREATE SCHEMA app;

ALTER SCHEMA app OWNER TO {{ $appName }}user;

{{ range $feature := .Features }}
CREATE TABLE app.{{ $feature.FeatureName }} (
{{- range $index, $field := .Fields }}
    {{ $field.Field | NameDB }} {{ $field.Field | TypeDB }}{{- if $field.Nullable }} {{ $field | NullableDB }}{{end}},
{{- end }}
    creation_user_id character varying,
    update_user_id character varying,
    created_at timestamp without time zone,
    updated_at timestamp
);

ALTER TABLE app.{{ $feature.FeatureName }} OWNER TO {{ $appName }}user;
{{end}}

{{- range .Defaults.Users }}
INSERT INTO auth.user VALUES ({{ .ID | ValueDB }}, {{ .Email | ValueDB }}, {{ .FirstName | ValueDB }}, {{ .LastName | ValueDB }}, {{ .Password | ValueDB }}, {{ .Active | ValueDB }}, {{ .CreationUserID | ValueDB }}, {{ .UpdateUserID | ValueDB }}, {{ .CreatedAt | ValueDB }}, {{ .UpdatedAt | ValueDB}});
{{- end }}

{{- range .Defaults.Roles }}
INSERT INTO auth.role VALUES ({{ .ID | ValueDB }}, {{ .Code | ValueDB  }}, {{ .Name | ValueDB }}, ' {{ .CreationUserID | ValueDB }}, NULL, {{ .CreatedAt | ValueDB }}, NULL);
INSERT INTO auth.user_role VALUES ('613254df-c779-479c-9d76-b8036e342979', {{ .ID | ValueDB }}, '613254df-c779-479c-9d76-b8036e342979', NULL, '2023-07-28 13:23:03.273735', NULL);
{{- end }}

{{- range .Features }}
    {{- $featureName := .FeatureName }}
    {{- range .Records }}
        {{- $fields := .Fields }}
INSERT INTO app.{{ $featureName }} VALUES ({{- range $index, $field := $fields }}{{ if $index }},{{end}}{{ $field | ValueDB }}{{- end }});
        
    {{- end }}
{{- end }}

ALTER TABLE ONLY auth.user
    ADD CONSTRAINT uq_email UNIQUE (email);

ALTER TABLE ONLY auth.user
    ADD CONSTRAINT users_email_key UNIQUE (email);

ALTER TABLE ONLY auth.user
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);
